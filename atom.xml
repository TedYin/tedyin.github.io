<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TedYin&#39;s Blog</title>
  <subtitle>快乐比生命更重要</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://tedyin.me/"/>
  <updated>2016-03-14T06:13:47.000Z</updated>
  <id>http://tedyin.me/</id>
  
  <author>
    <name>TedYin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你真的会用单例模式吗</title>
    <link href="http://tedyin.me/2016/03/13/singlton-pattern/"/>
    <id>http://tedyin.me/2016/03/13/singlton-pattern/</id>
    <published>2016-03-13T06:47:18.000Z</published>
    <updated>2016-03-14T06:13:47.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;转载请注明出处：&lt;a href=&quot;http://tedyin.me/2016/03/13/singlton-pattern/&quot;&gt;http://tedyin.me/2016/03/13/singlton-pattern/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天给大家介绍一下&lt;code&gt;单例模式&lt;/code&gt;,就是这个出场率特别高的模式，是个程序员基本都用过他，没用过至少也都知道他。可是我们真的了解他吗？&lt;/p&gt;
&lt;p&gt;单例模式通常的实现方式分为以下两种：&lt;/p&gt;
&lt;h3 id=&quot;饿汉式&quot;&gt;&lt;a href=&quot;#饿汉式&quot; class=&quot;headerlink&quot; title=&quot;饿汉式&quot;&gt;&lt;/a&gt;饿汉式&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;// Do something ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;code&gt;饿汉式&lt;/code&gt;是最简单的实现方式，这种实现方式适合那些在初始化时就要用到单例的情况，这种方式简单粗暴，如果单例对象初始化非常快，而且占用内存非常小的时候这种方式是比较合适的，可以直接在应用启动时加载并初始化。&lt;br&gt;但是，如果单例初始化的操作耗时比较长而应用对于启动速度又有要求，或者单例的占用内存比较大，再或者单例只是在某个特定场景的情况下才会被使用，而一般情况下是不会使用时，使用&lt;code&gt;饿汉式&lt;/code&gt;的单例模式就是不合适的，这时候就需要用到&lt;code&gt;懒汉式&lt;/code&gt;的方式去按需延迟加载单例。&lt;/p&gt;
&lt;h3 id=&quot;懒汉式&quot;&gt;&lt;a href=&quot;#懒汉式&quot; class=&quot;headerlink&quot; title=&quot;懒汉式&quot;&gt;&lt;/a&gt;懒汉式&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt; == instance)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;// Do something ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;懒汉式&lt;/code&gt;与&lt;code&gt;饿汉式&lt;/code&gt;的最大区别就是将单例的初始化操作，延迟到需要的时候才进行，这样做在某些场合中有很大用处。比如某个单例用的次数不是很多，但是这个单例提供的功能又非常复杂，而且加载和初始化要消耗大量的资源，这个时候使用&lt;code&gt;懒汉式&lt;/code&gt;就是非常不错的选择。&lt;/p&gt;
&lt;h3 id=&quot;多线程下的单例模式&quot;&gt;&lt;a href=&quot;#多线程下的单例模式&quot; class=&quot;headerlink&quot; title=&quot;多线程下的单例模式&quot;&gt;&lt;/a&gt;多线程下的单例模式&lt;/h3&gt;&lt;p&gt;上面介绍了一些单例模式的基本应用方法，但是上面所说的那些使用方式都是有一个隐含的前提，那就是他们都是应用在单线程条件下，一旦换成了多线程就有出错的风险。&lt;br&gt;如果在多线程的情况下，&lt;code&gt;饿汉式&lt;/code&gt;不会出现问题，因为JVM只会加载一次单利类，但是&lt;code&gt;懒汉式&lt;/code&gt;可能就会出现重复创建单利对象的问题。为什么会有这样的问题呢？因为&lt;code&gt;懒汉式&lt;/code&gt;在创建单例时是 &lt;strong&gt;线程不安全的&lt;/strong&gt;，多个线程可能会并发调用他的&lt;code&gt;newInstance&lt;/code&gt;方法导致多个线程可能会创建多份相同的单例出来。&lt;/p&gt;
&lt;p&gt;那有没有办法，使&lt;code&gt;饿汉式&lt;/code&gt;的单利模式也是线程安全的呢？答案肯定是有的，大家通常会使用加同步锁的方式去实现，但是这样实现起来比较麻烦。那么有没有更好的实现方式呢？能问这个问题那必须是有的，否则就得打脸了。 &lt;em&gt;我们可以利用JVM的类加载机制去实现&lt;/em&gt;。在很多情况下JVM已经为我们提供了同步控制，比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;static{}&lt;/code&gt;区块中初始化的数据&lt;/li&gt;
&lt;li&gt;访问&lt;code&gt;final&lt;/code&gt;字段时&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;li&gt;等等&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为在JVM进行类加载的时候他会保证数据是同步的，我们可以这样实现：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;采用内部类，在这个内部类里面去创建对象实例。这样的话，只要应用中不使用内部类 JVM 就不会去加载这个单例类，也就不会创建单例对象，从而实现&lt;code&gt;懒汉式&lt;/code&gt;的延迟加载和线程安全。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实现代码如下：&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//内部类，在装载该内部类时才会去创建单利对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SingletonHolder&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; SingletonHolder.instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样实现出来的单例类就是线程安全的，麻麻再也不用担心我的单例不是单例了。&lt;/p&gt;
&lt;h3 id=&quot;使用枚举实现单例模式&quot;&gt;&lt;a href=&quot;#使用枚举实现单例模式&quot; class=&quot;headerlink&quot; title=&quot;使用枚举实现单例模式&quot;&gt;&lt;/a&gt;使用枚举实现单例模式&lt;/h3&gt;&lt;p&gt;除了上述的单例模式的实现方式外，我们还可以通过枚举类来实现单利模式，这也是&lt;code&gt;Effective Java&lt;/code&gt;中推荐的方式。&lt;/p&gt;
&lt;p&gt;使用枚举类型实现单例模式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; Singleton&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//定义一个枚举的元素，它就是Singleton的一个实例&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;// do something ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;用枚举实现是不是更简单呢？枚举方式实现的单例模式也是线程安全的，所以大家不用担心多线程问题，可以大胆去用。&lt;/p&gt;
&lt;p&gt;以上就是单例模式的使用，现在完全可以说，你真的会用单例模式了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;转载请注明出处：&lt;a href=&quot;http://tedyin.me/2016/03/13/singlton-pattern/&quot;&gt;http://tedyin.me/2016/03/13/singlton-pattern/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;今天给大家介绍一下&lt;code&gt;单例模式&lt;/code&gt;,就是这个出场率特别高的模式，是个程序员基本都用过他，没用过至少也都知道他。可是我们真的了解他吗？&lt;/p&gt;
&lt;p&gt;单例模式通常的实现方式分为以下两种：&lt;/p&gt;
&lt;h3 id=&quot;饿汉式&quot;&gt;&lt;a href=&quot;#饿汉式&quot; class=&quot;headerlink&quot; title=&quot;饿汉式&quot;&gt;&lt;/a&gt;饿汉式&lt;/h3&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    	&lt;span class=&quot;comment&quot;&gt;// Do something ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://tedyin.me/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="面向对象设计" scheme="http://tedyin.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
      <category term="java" scheme="http://tedyin.me/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>让你的Rails应用更加健壮的5种姿势『译』</title>
    <link href="http://tedyin.me/2016/03/06/five-practices-for-robust-ruby-on-rails-applications/"/>
    <id>http://tedyin.me/2016/03/06/five-practices-for-robust-ruby-on-rails-applications/</id>
    <published>2016-03-06T09:58:43.000Z</published>
    <updated>2016-03-10T06:28:04.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://brewhouse.io/2016/02/26/five-practices-for-robust-ruby-on-rails-applications.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接: Five Practices for Robust Ruby on Rails Applications&lt;/a&gt;&lt;br&gt;转载请注明出处：&lt;a href=&quot;http://tedyin.me/2016/03/06/five-practices-for-robust-ruby-on-rails-applications/&quot;&gt;http://tedyin.me/2016/03/06/five-practices-for-robust-ruby-on-rails-applications/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无论什么时候，当我发现项目里面存在 bug 或者数据不一致，但却又很难找到是哪里出了问题时，我总是会感叹：“他们(the developer)只需要再多敲几下键盘，这些事情就不会发生了。”&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;http://brewhouse.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Brewhouse&lt;/a&gt;的工作中，我们会应用下面5种最佳实践，让我们的 Rails 应用更加健壮。因为这些方法可以让代码在遇到问题时，可以尽早地、明确地、快速地的抛出问题，告诉我们哪里出错了。我们可以通过捕捉这些错误信息来确保我们所有的数据和操作都是正确有效的。&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;使用-Hash-fetch-方法去处理‘有问题’的-hash-对象&quot;&gt;&lt;a href=&quot;#使用-Hash-fetch-方法去处理‘有问题’的-hash-对象&quot; class=&quot;headerlink&quot; title=&quot;使用 Hash#fetch 方法去处理‘有问题’的 hash 对象&quot;&gt;&lt;/a&gt;使用 Hash#fetch 方法去处理‘有问题’的 hash 对象&lt;/h2&gt;&lt;p&gt;&lt;code&gt;unexpected method &amp;#39;upcase&amp;#39; for nil…&lt;/code&gt; 这样的错误，我们经常会遇到。无论什么时候当你去遍历一个&lt;code&gt;hash&lt;/code&gt;对象，如果你希望这个&lt;code&gt;hash&lt;/code&gt;对象中所有的&lt;code&gt;key&lt;/code&gt;都存在，你最好是使用&lt;code&gt;fetch&lt;/code&gt;方法去代替&lt;code&gt;[]&lt;/code&gt;方法。&lt;code&gt;fetch()&lt;/code&gt;方法在遇到&lt;code&gt;key&lt;/code&gt;不存在的情况时会抛出异常，因此你就无法再传入一个有问题的&lt;code&gt;hash&lt;/code&gt;对象了，也就不可能出现一些奇怪的 bug 了。&lt;/p&gt;
&lt;h2 id=&quot;使用-case-…-else-raise-去捕获异常数据&quot;&gt;&lt;a href=&quot;#使用-case-…-else-raise-去捕获异常数据&quot; class=&quot;headerlink&quot; title=&quot;使用 case … else raise 去捕获异常数据&quot;&gt;&lt;/a&gt;使用 case … else raise 去捕获异常数据&lt;/h2&gt;&lt;p&gt;最好是在所有的&lt;code&gt;case&lt;/code&gt;条件选择语句中加入&lt;code&gt;else raise&lt;/code&gt;语句，来处理一些你预想之外的情况。当你的方法接收到一些你预想之外的数据时，&lt;strong&gt;我想你肯定是想知道这些是什么数据，而不是说忽略这些数据，而让代码继续执行&lt;/strong&gt;。因此建议使用&lt;code&gt;case ... else raise&lt;/code&gt;!&lt;/p&gt;
&lt;h2 id=&quot;使用-ActiveRecord-的-‘-’-方法，让失败的操作自己说话&quot;&gt;&lt;a href=&quot;#使用-ActiveRecord-的-‘-’-方法，让失败的操作自己说话&quot; class=&quot;headerlink&quot; title=&quot;使用 ActiveRecord 的 ‘!’ 方法，让失败的操作自己说话&quot;&gt;&lt;/a&gt;使用 ActiveRecord 的 ‘!’ 方法，让失败的操作自己说话&lt;/h2&gt;&lt;p&gt;对于每个公司来说，数据通常都是非常重要的资产。如果在对数据进行持久化或者其他错作时失败了，但是这些失败的操作是悄悄发生的我们并不知道，那么这会是一件很危险的事情，将会对我们的数据造成严重的危害。因此无论什么时候，当你不希望某些操作失败时你却不知道的话，建议是用&lt;code&gt;create!&lt;/code&gt;，&lt;code&gt;update!&lt;/code&gt;和&lt;code&gt;destroy!&lt;/code&gt;方法，在操作失败的时候他们会抛出异常，来告诉你操作失败了。这额外的一个字符&lt;code&gt;!&lt;/code&gt;将会让你避免去处理麻烦的数据不一致等奇奇怪怪的问题。&lt;/p&gt;
&lt;p&gt;我们一般都会写测试代码，但是我们一定要确保测试代码在&lt;code&gt;setup&lt;/code&gt;时是正确的，而且如果测试在&lt;code&gt;setup&lt;/code&gt;时是错误的，那一定要抛出异常让我们知道，因为没有比使用一个错误的&lt;code&gt;setup&lt;/code&gt;跑出正确的测试结果更让人蛋疼的事情了，这样的代码一旦上线，那后果你懂的…&lt;/p&gt;
&lt;p&gt;除了上面说的，在执行的多个SQL调用时，使用事务将那些调用包起来处理，可以避免你的操作导致数据处于不一致的状态，或者是半吊子的状态。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：确实如此，曾经有一次我在处理数据的时候，就是没有注意这些导致造成了数据破坏，幸亏当时的数据有备份，才没有导致大的问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;使用-ActiveRecord-的-validate-相关方法来动态校验你的数据&quot;&gt;&lt;a href=&quot;#使用-ActiveRecord-的-validate-相关方法来动态校验你的数据&quot; class=&quot;headerlink&quot; title=&quot;使用 ActiveRecord 的 validate 相关方法来动态校验你的数据&quot;&gt;&lt;/a&gt;使用 ActiveRecord 的 validate 相关方法来动态校验你的数据&lt;/h2&gt;&lt;p&gt;使用 ActiveRecord 的 validate 相关的方法，并且使用带有&lt;code&gt;!&lt;/code&gt;的方法来做校验方法，将会是一个很好的方式去确保你在持久化数据时不会出错。举个例子：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Post&lt;/span&gt; &amp;lt; ActiveRecord::Model&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validates &lt;span class=&quot;symbol&quot;&gt;:author&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:blog&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;presence:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validates &lt;span class=&quot;symbol&quot;&gt;:published_by&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;presence:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;if:&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:published?&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  validates &lt;span class=&quot;symbol&quot;&gt;:comment_count&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;numericality:&lt;/span&gt; &amp;#123; &lt;span class=&quot;symbol&quot;&gt;greater_or_equal_to:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;# ...&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h2 id=&quot;使用数据库约束来确保你的数据的一致性&quot;&gt;&lt;a href=&quot;#使用数据库约束来确保你的数据的一致性&quot; class=&quot;headerlink&quot; title=&quot;使用数据库约束来确保你的数据的一致性&quot;&gt;&lt;/a&gt;使用数据库约束来确保你的数据的一致性&lt;/h2&gt;&lt;p&gt;你的数据库是你最好的朋友，他能够帮你保存你的数据，并且确保你的数据不出现重复和“孤儿记录”的问题。&lt;/p&gt;
&lt;p&gt;一般情况下，你应该为你的数据库中的大多数字段设置他们默认不为空，也就是&lt;code&gt;null: false&lt;/code&gt;。&lt;br&gt;你是否知道 Rails 中的 &lt;code&gt;has_one&lt;/code&gt; 约束，在数据的创建时不会起到唯一性约束作用呢？&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Account&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  has_one &lt;span class=&quot;symbol&quot;&gt;:account_settings&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;account = Account.create!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;account.create_account_settings!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;account.create_account_settings!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;account.create_account_settings!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;account.account_settings&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; &lt;span class=&quot;comment&quot;&gt;# =&amp;gt; one of the three account settings you&#39;ve created... -_-&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果想让你的数据不出现重复，最好的方式是给你的数据添加唯一索引。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;add_index &lt;span class=&quot;symbol&quot;&gt;:account_settings&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:account_id&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;unique:&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这样做之后，如果你尝试去创建重复的记录时，数据库就会抛出异常，去阻止你创建重复数据。&lt;/p&gt;
&lt;p&gt;我们每一个人都不会想存储一些“孤儿记录”在数据库中。但是如何去解决这些“孤儿记录”呢？使用外键是可以很好的帮你解决这个问题，在这里我推荐大家使用&lt;a href=&quot;https://github.com/SchemaPlus/schema_auto_foreign_keys&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;schema_auto_foreign_keys&lt;/a&gt;这个 gem 去为你的相关的表自动添加外键约束。&lt;/p&gt;
&lt;h2 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h2&gt;&lt;p&gt;多写几个字母就可以帮我们避免处理数据不一致的麻烦问题，也会大大减少我们代码的 bug 率，提高我们的工作效率。记住，使用&lt;code&gt;!&lt;/code&gt;，&lt;code&gt;raise&lt;/code&gt;，&lt;code&gt;validate&lt;/code&gt;和&lt;code&gt;数据库约束&lt;/code&gt;去强化你的代码，使你的代码更加强壮。你的同事会感谢你，说不定以后当你在次翻看你的代码的时，你会觉得当时做的真好，让你在后来避免了很多不必要的麻烦。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://brewhouse.io/2016/02/26/five-practices-for-robust-ruby-on-rails-applications.html&quot;&gt;原文链接: Five Practices for Robust Ruby on Rails Applications&lt;/a&gt;&lt;br&gt;转载请注明出处：&lt;a href=&quot;http://tedyin.me/2016/03/06/five-practices-for-robust-ruby-on-rails-applications/&quot;&gt;http://tedyin.me/2016/03/06/five-practices-for-robust-ruby-on-rails-applications/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;无论什么时候，当我发现项目里面存在 bug 或者数据不一致，但却又很难找到是哪里出了问题时，我总是会感叹：“他们(the developer)只需要再多敲几下键盘，这些事情就不会发生了。”&lt;/p&gt;
&lt;p&gt;在&lt;a href=&quot;http://brewhouse.io/&quot;&gt;Brewhouse&lt;/a&gt;的工作中，我们会应用下面5种最佳实践，让我们的 Rails 应用更加健壮。因为这些方法可以让代码在遇到问题时，可以尽早地、明确地、快速地的抛出问题，告诉我们哪里出错了。我们可以通过捕捉这些错误信息来确保我们所有的数据和操作都是正确有效的。&lt;/p&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://tedyin.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="ruby on rails" scheme="http://tedyin.me/tags/ruby-on-rails/"/>
    
  </entry>
  
  <entry>
    <title>SOLID 原则在Ruby中的应用『译』</title>
    <link href="http://tedyin.me/2016/02/27/solid-principles-in-ruby/"/>
    <id>http://tedyin.me/2016/02/27/solid-principles-in-ruby/</id>
    <published>2016-02-27T15:27:00.000Z</published>
    <updated>2016-03-10T06:28:04.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://eftimov.net/solid-principles&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;原文链接: SOLID Principles in Ruby&lt;/a&gt;&lt;br&gt;转载请注明出处：&lt;a href=&quot;http://tedyin.me/2016/02/27/solid-principles-in-ruby/&quot;&gt;http://tedyin.me/2016/02/27/solid-principles-in-ruby/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一名程序员无论你的水平高低，你都会想写出一手优秀的代码，但是想写优秀的代码并不容易，因此怎样才能提高我们的代码质量呢？下面来看下我们今天的主角 &lt;code&gt;SOLID 原则&lt;/code&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;SOLID-原则是什么&quot;&gt;&lt;a href=&quot;#SOLID-原则是什么&quot; class=&quot;headerlink&quot; title=&quot;SOLID 原则是什么&quot;&gt;&lt;/a&gt;SOLID 原则是什么&lt;/h2&gt;&lt;p&gt;SOLID 不是一个原则，他是一组面向对象设计原则的简称，他代表下面5种设计原则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;S&lt;/strong&gt; ingle Responsibility Principle &lt;em&gt;单一职责原则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;O&lt;/strong&gt; pen/Closed Principle &lt;em&gt;开闭原则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;L&lt;/strong&gt; iskov Substitution Principle &lt;em&gt;里氏替换原则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;I&lt;/strong&gt; nterface Segregation Principle &lt;em&gt;接口分离原则&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;D&lt;/strong&gt; ependency Inversion Principle &lt;em&gt;依赖倒置原则&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上就是SOLID中的5种面向对象设计原则，下面分别看看他们具体指的是什么。&lt;/p&gt;
&lt;h3 id=&quot;单一职责原则-SPR&quot;&gt;&lt;a href=&quot;#单一职责原则-SPR&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则(SPR)&quot;&gt;&lt;/a&gt;单一职责原则(SPR)&lt;/h3&gt;&lt;p&gt;在我看来这个是最简单的一个设计原则，&lt;code&gt;SPR&lt;/code&gt;的说明如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每一个类或则方法都应该有且仅有一个职责，而且他的这个职责应该被完全封装在这个类里面。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如何去判断你的代码是否符合这一原则的最好方式就是去问问自己：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个类或者方法到底做了什么？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果他干了不只一件事情的话，那么他就违反了&lt;code&gt;SPR&lt;/code&gt;原则。下面来看一个&lt;code&gt;Student&lt;/code&gt;类，每个&lt;code&gt;Student&lt;/code&gt;对象都有&lt;code&gt;grades&lt;/code&gt;属性。&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:first_term_home_work&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:first_term_test&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;:first_term_paper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:second_term_home_work&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:second_term_test&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;symbol&quot;&gt;:second_term_paper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;first_term_grade&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (first_term_home_work + first_term_test + first_term_paper) / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;second_term_grade&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (second_term_home_work + second_term_test + second_term_paper) / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;也许有些人已经意识到了，上面的写法是错误的，也许有些人还没有感觉到。不管有没有意识到，上面的代码显然是没有循序&lt;code&gt;SPR&lt;/code&gt;原则的，原因就是 Student 类拥有计算每个学期平均分的逻辑，但是&lt;code&gt;Student&lt;/code&gt;类是用来封装关于学生信息的而不是用来计算分数的，计算分数的逻辑应当放在&lt;code&gt;Grade&lt;/code&gt;类中才对。下面我们遵循&lt;code&gt;SPR&lt;/code&gt;原则重构一下代码，重构后的代码如下：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @terms = [&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Grade.new(&lt;span class=&quot;symbol&quot;&gt;:first&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      Grade.new(&lt;span class=&quot;symbol&quot;&gt;:second&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      ]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;first_term_grade&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    term(&lt;span class=&quot;symbol&quot;&gt;:first&lt;/span&gt;).grade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;second_term_grade&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    term(&lt;span class=&quot;symbol&quot;&gt;:second&lt;/span&gt;).grade&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  private&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;term&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;reference&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @terms.find &amp;#123;|term| term.name == reference&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Grade&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;symbol&quot;&gt;:name&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:home_work&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:test&lt;/span&gt;, &lt;span class=&quot;symbol&quot;&gt;:paper&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(name)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @name      = name&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @home_work = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @test      = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @paper     = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;grade&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (home_work + test + paper) / &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;重构之后的代码&lt;code&gt;Student&lt;/code&gt;类中的计算分数的逻辑移到了&lt;code&gt;Grade&lt;/code&gt;类中，&lt;code&gt;Student&lt;/code&gt;类中只有对&lt;code&gt;Grade&lt;/code&gt;实例的引用。现在所有的类都遵循&lt;code&gt;SPR&lt;/code&gt;原则，因为每个类都是职责单一的。&lt;/p&gt;
&lt;h3 id=&quot;开闭原则-OCP&quot;&gt;&lt;a href=&quot;#开闭原则-OCP&quot; class=&quot;headerlink&quot; title=&quot;开闭原则(OCP)&quot;&gt;&lt;/a&gt;开闭原则(OCP)&lt;/h3&gt;&lt;p&gt;开闭原则的定义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一个类或者模块对扩展开放，对修改关闭。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;什么意思呢？他的意思就是：一旦一个类已经实现了当时的需求，他就不应该为了去实现接下来的需求而被修改。你是不是觉得这样做没有意义？那我们下面看个例子来说明一下：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyLogger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @format_string = &lt;span class=&quot;string&quot;&gt;&quot;%s: %s\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(msg)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	STDOUT.write @format_string % [Time.now, msg]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是一个简单的logger类，他可以将把给定的msg和当时的时间通过&lt;code&gt;STDOUT&lt;/code&gt;格式化输出出来。非常简单对吧，下面来测试一下：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;irb&amp;gt; MyLogger.new.log(&lt;span class=&quot;string&quot;&gt;&#39;test!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;02&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;0200&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; test!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;测试OK，没什么问题，但是假如在以后的某一天，我们想改变一下输出的格式，想实现下面的日志格式&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; [LOG] &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;02&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;0200&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; test!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;怎么办呢？假如现在由一个不懂&lt;code&gt;OCP&lt;/code&gt;原则的程序员来实现上述格式，实现的代码如下：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyLogger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @format_string = &lt;span class=&quot;string&quot;&gt;&quot;[LOG] %s: %s\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出的结果如下：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;irb&amp;gt; MyLogger.new.log(&lt;span class=&quot;string&quot;&gt;&#39;test!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; [LOG] &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;02&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;0200&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; test!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;输出的格式完全符合要求，一切都OK，但是这样做真的就对吗？&lt;br&gt;仔细想想，假如上面被修改的类是一个App中的核心类，对&lt;code&gt;format_string&lt;/code&gt;方法的修改，可能会破坏那些依赖&lt;code&gt;MyLogger&lt;/code&gt;类的方法使得他们不能正常的工作。也许在APP中存在许许多多的类都依赖刚才说的那些方法，但是现在我们修改了代码，破坏了这些类和方法。这就是在破坏&lt;code&gt;OCP&lt;/code&gt;原则，这会导致灾难性的后果。&lt;/p&gt;
&lt;p&gt;既然不遵循&lt;code&gt;OCP&lt;/code&gt;原则会有很严重的问题，那么实现上面修改日志格式需求的正确姿势是什么呢？毫无疑问当然是&lt;code&gt;继承&lt;/code&gt;或者&lt;code&gt;组合&lt;/code&gt;！&lt;br&gt;我们来看看下面使用继承的例子：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;NewCoolLogger&lt;/span&gt; &amp;lt; MyLogger&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @format_string = &lt;span class=&quot;string&quot;&gt;&quot;[LOG] %s: %s\n&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;irb&amp;gt; NewCoolLogger.new.log(&lt;span class=&quot;string&quot;&gt;&#39;test!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; [LOG] &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;02&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;0200&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; test!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;棒呆！和我们预期的一样，那&lt;code&gt;MyLogger&lt;/code&gt;的输出呢？&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;irb&amp;gt; MyLogger.new.log(&lt;span class=&quot;string&quot;&gt;&#39;test!&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;=&amp;gt; &lt;span class=&quot;number&quot;&gt;2016&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;02&lt;/span&gt;-&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;32&lt;/span&gt; +&lt;span class=&quot;number&quot;&gt;0200&lt;/span&gt;&lt;span class=&quot;symbol&quot;&gt;:&lt;/span&gt; test!&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;还是棒呆！那么我刚刚都干了些啥呢？我们创建了一个新的&lt;code&gt;NewCoolLogger&lt;/code&gt;类,&lt;code&gt;扩展(extend)&lt;/code&gt;了&lt;code&gt;MyLogger&lt;/code&gt;类。那些之前依赖老的logger方法的类和方法依然可以正常的工作，老的logger还是和以前一样提供相同的方法，新的logger则提供新的logger方法，这是我们所期待的。&lt;br&gt;我刚才说了两种重构方式，下面我们来看看使用另外一种方式&lt;code&gt;组合&lt;/code&gt;来重构代码的例子：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyLogger&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(msg, &lt;span class=&quot;symbol&quot;&gt;formatter:&lt;/span&gt; MyLogFormatter.new)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    STDOUT.write formatter.format(msg)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;我们可以注意到，log方法多了一个可选参数&lt;code&gt;formatter&lt;/code&gt;，对于日志格式化的事情本来就应该是&lt;code&gt;MyLogFormatter&lt;/code&gt;类的事情，而不应该是logger类的事情。使用上面的方式重构更好，因为这样做了之后&lt;code&gt;MyLogger#log&lt;/code&gt;可以接受各种各样不同的格式化方式，而且&lt;code&gt;MyLogger&lt;/code&gt;也不在需要去关心具体的格式化格式，因为他只需要一条&lt;code&gt;String&lt;/code&gt;，具体是什么格式的则由传入&lt;code&gt;MyLogger#log&lt;/code&gt;个格式化类来确定。假如我们又要实现 Error Log 输出，现在简单了只需要传入一个&lt;code&gt;ErrorLogFormatter&lt;/code&gt;实例即可输出带有 “[ERROR]” 前缀的日志。&lt;/p&gt;
&lt;h3 id=&quot;里氏替换原则-LSP&quot;&gt;&lt;a href=&quot;#里氏替换原则-LSP&quot; class=&quot;headerlink&quot; title=&quot;里氏替换原则(LSP)&quot;&gt;&lt;/a&gt;里氏替换原则(LSP)&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Barbara_Liskov&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Barbara Liskov&lt;/a&gt;对&lt;code&gt;LSP&lt;/code&gt;原则的定义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果S是T的一个子类，那么不需要修改代码中的任何配置和属性，S的实例也可以替换T的实例对象，而且不影响代码的正常运行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;坦白的讲，我觉得这个定义是非常难理解的，因此经过一番思考，总结下来如下：&lt;/p&gt;
&lt;p&gt;假如现在有一个&lt;code&gt;Bird&lt;/code&gt;类，还有两个实例对象 obj1 和 obj2。obj1 是 Duck 类的对象，Duck 类是 Bird 类的子类，obj2 是 Pigeon 类的对象，Pigeon 类也是Bird 类的子类。&lt;code&gt;LSP&lt;/code&gt;原则的意思是，obj2 是Bird子类的实例，obj1 是Bird子类的实例，因此我们应当把 obj1 和 obj2 等同对待，都当做Bird的实例对待。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：其实我觉得上面的定义已经说的很清楚了，上面说的 obj1 之类的例子有点多余。。。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我们来看个例子来说明下：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Person&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;greet&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    puts &lt;span class=&quot;string&quot;&gt;&quot;Hey there!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Student&lt;/span&gt; &amp;lt; Person&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;years_old&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(age)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;I&#39;m &lt;span class=&quot;subst&quot;&gt;#&amp;#123;age&amp;#125;&lt;/span&gt; years old.&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;person = Person.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;student = Student.new&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# LSP原则的意思是如果我知道 Person 拥有的接口，那么我应该也能猜到 Student 拥有的接口，因为 Student 类是 Person 的子类。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;student.greet&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# returns &quot;Hey there!&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;以上就是对&lt;code&gt;LSP&lt;/code&gt;原则的解释&lt;/p&gt;
&lt;h3 id=&quot;接口分离原则-ISP&quot;&gt;&lt;a href=&quot;#接口分离原则-ISP&quot; class=&quot;headerlink&quot; title=&quot;接口分离原则(ISP)&quot;&gt;&lt;/a&gt;接口分离原则(ISP)&lt;/h3&gt;&lt;p&gt;接口分离原则的定义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不应该强迫客户端依赖一些他们用不到的方法或接口。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;就像定义那样很简单，我们来看看代码说明一下：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Computer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;turn_on&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# turns on the computer&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  	&lt;span class=&quot;comment&quot;&gt;# type on the keyboard&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;change_hard_drive&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# opens the computer body&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# and changes the hard drive&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Programmer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;use_computer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @computer.turn_on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @computer.type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Technician&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fix_computer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @computer.change_hard_drive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在这个例子中有&lt;code&gt;Computer&lt;/code&gt;，&lt;code&gt;Programer&lt;/code&gt;，&lt;code&gt;Technician&lt;/code&gt;三个类。其中&lt;code&gt;Programer&lt;/code&gt;，&lt;code&gt;Technician&lt;/code&gt;会使用到电脑，而且是以不同的方式使用，&lt;code&gt;Programer&lt;/code&gt;使用的是&lt;code&gt;type&lt;/code&gt;方法，&lt;code&gt;Technician&lt;/code&gt;用的是&lt;code&gt;change_hard_drive&lt;/code&gt;，按照&lt;code&gt;LSP&lt;/code&gt;原则要求 &lt;strong&gt;不应当强迫客户端依赖一些他们用不到的接口或者方法&lt;/strong&gt;，&lt;code&gt;Programer&lt;/code&gt;类用不到&lt;code&gt;change_hard_drive&lt;/code&gt;方法，同样的&lt;code&gt;Technician&lt;/code&gt;用不到&lt;code&gt;type&lt;/code&gt;方法，但是一旦这两个方法发生变化，那么就有可能影响到&lt;code&gt;Programer&lt;/code&gt;或者&lt;code&gt;Technician&lt;/code&gt;类的正常使用。下面我们重构一下代码，来满足&lt;code&gt;LSP&lt;/code&gt;原则&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Computer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;turn_on&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;type&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ComputerInternals&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;change_hard_drive&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Programmer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;use_computer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @computer.turn_on&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @computer.type&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Technician&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;fix_computer&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @computer_internals.change_hard_drive&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;经过重构后&lt;code&gt;Technician&lt;/code&gt;使用了&lt;code&gt;ComputerInternals&lt;/code&gt;类的对象，这个类封装了从&lt;code&gt;Computer&lt;/code&gt;中分离出来的方法&lt;code&gt;change_hard_drive&lt;/code&gt;。现在&lt;code&gt;Computer&lt;/code&gt;类可以受到&lt;code&gt;Programer&lt;/code&gt;类的影响(写代码改变OS)，但是再也影响不到&lt;code&gt;Technician&lt;/code&gt;类了。&lt;/p&gt;
&lt;h3 id=&quot;依赖倒置原则-DIP&quot;&gt;&lt;a href=&quot;#依赖倒置原则-DIP&quot; class=&quot;headerlink&quot; title=&quot;依赖倒置原则(DIP)&quot;&gt;&lt;/a&gt;依赖倒置原则(DIP)&lt;/h3&gt;&lt;p&gt;依赖倒置原则代表了一种软件模块解耦的方式，他的定义有两部分：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;上层模块不应该依赖下层模块，他们应该都依赖抽象。&lt;/li&gt;
&lt;li&gt;抽象不能依赖具体实现，具体实现应该依赖抽象。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;我知道这个理解起来有点绕，但是在开始看具体的例子之前，我希望你不要把 &lt;em&gt;依赖倒置&lt;/em&gt; 和 &lt;em&gt;依赖注入&lt;/em&gt; 弄混淆，后者是一种软件技巧或者说是一种软件设计模式，而前者是面向对象设计原则的一种。&lt;br&gt;好了下面来看看具体的例子：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Report&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @body = &lt;span class=&quot;string&quot;&gt;&quot;whatever&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    XmlFormatter.new.generate @body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;XmlFormatter&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(body)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# convert the body argument into XML&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Report&lt;/code&gt;类是用来生成 XML 报表的，在他的初始化方法中，我们设置了报表内容(body)，&lt;code&gt;print&lt;/code&gt;方法使用&lt;code&gt;XmlFormatter&lt;/code&gt;类去将报表内容转换成 XML 格式。&lt;/p&gt;
&lt;p&gt;下面我们来看看&lt;code&gt;Report&lt;/code&gt;这个类，从这个类的名字我们能看出来他是个普通的类，会返回某种类型的报表(report)，但是他没告诉我们会返回哪种格式的报表。事实上对于上面这个例子我们能够很轻松的将&lt;code&gt;Report&lt;/code&gt;重命名为&lt;code&gt;XmlReport&lt;/code&gt;因为我们知道他的实现细节，知道他只实现了导出 XML 报表的功能，但是与其让&lt;code&gt;Report&lt;/code&gt;变的更加具体(丢失更多的扩展性)，我们还不如好好想想怎么去将他更好的抽象。&lt;/p&gt;
&lt;p&gt;目前我们的类依赖&lt;code&gt;XmlReport&lt;/code&gt;类和他的&lt;code&gt;generate&lt;/code&gt;方法，&lt;code&gt;Report&lt;/code&gt;依赖的是一个具体的实现而不是抽象，只有当提供格式化方法的类是&lt;code&gt;XmlFormatter&lt;/code&gt;的时候，我们的&lt;code&gt;Report&lt;/code&gt;类才能正常的工作。假如我们现在想导出 CSV 或者 JSON 格式的报表怎么办？那我们就只能提供更多的具体的方法，比如&lt;code&gt;print_xml&lt;/code&gt;，&lt;code&gt;print_csv&lt;/code&gt;，&lt;code&gt;print_json&lt;/code&gt;等。这意味着&lt;code&gt;Report&lt;/code&gt;类和具体实现绑的非常紧，耦合非常高，他依赖格式化类的类型，但却不依赖这些格式化类的抽象。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;译者注：Report 类就是只知道有这么多个格式化类，但是却不知道他们之间有什么共同特点，依赖这些具体的类却不依赖他们的共同特点，也就是不依赖抽象。假如现在又有新的格式，Report 还得去了解新的格式类，如果依赖他们共同拥有的一个格式化的接口，那Report就不用去操心你这个格式化的类到底是格式化成啥了，我直接调用这个格式化的方法就行了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我们重构一下代码：&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Report&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;initialize&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @body = &lt;span class=&quot;string&quot;&gt;&quot;whatever&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(formatter)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    formatter.generate @body&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;XmlFormatter&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(body)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# convert the body argument into XML&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;注意&lt;code&gt;print&lt;/code&gt;方法，他知道自己需要一个 formatter，但是他关心的是这个 formatter 的接口。更具体地讲，他只关心这个 formatter 能够给他提供的 &lt;code&gt;generate&lt;/code&gt;方法，具体是什么样的 formatter 他不在乎，只要能提供&lt;code&gt;generate&lt;/code&gt;方法，帮他完成格式化大业就行。这样设计大家有没有觉得更灵活呢？假如我们现在需要 CSV 格式的报表，我们只需要提供下面这个类就行了。&lt;br&gt;&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;CSVFormatter&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;generate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(body)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;# convert the body argument into CSV&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;end&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Report#print&lt;/code&gt;方法将会接收一个&lt;code&gt;CSVFormatter&lt;/code&gt;类的实例对象，这个实例对象能够将报表内容转换成 CSV 格式。&lt;/p&gt;
&lt;p&gt;OK，到此为止 &lt;strong&gt;SOLID&lt;/strong&gt; 五中面向对象设计原则已经讲完了，希望大家在日常编写代码的过程中能好好应用。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://eftimov.net/solid-principles&quot;&gt;原文链接: SOLID Principles in Ruby&lt;/a&gt;&lt;br&gt;转载请注明出处：&lt;a href=&quot;http://tedyin.me/2016/02/27/solid-principles-in-ruby/&quot;&gt;http://tedyin.me/2016/02/27/solid-principles-in-ruby/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一名程序员无论你的水平高低，你都会想写出一手优秀的代码，但是想写优秀的代码并不容易，因此怎样才能提高我们的代码质量呢？下面来看下我们今天的主角 &lt;code&gt;SOLID 原则&lt;/code&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="翻译" scheme="http://tedyin.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
      <category term="面向对象设计" scheme="http://tedyin.me/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch 的批处理</title>
    <link href="http://tedyin.me/2016/01/26/elasticsearch-batch-processing/"/>
    <id>http://tedyin.me/2016/01/26/elasticsearch-batch-processing/</id>
    <published>2016-01-26T14:00:00.000Z</published>
    <updated>2016-02-29T09:44:11.000Z</updated>
    
    <content type="html">&lt;p&gt;前面已经介绍了如何使用ES提供的REST API去做CRUD操作,但是这些操作都是单一的.今天来介绍一下ES中的批处理,可以批量CUD索引和文档&lt;br&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;curl&lt;/span&gt; -XPOST &lt;span class=&quot;string&quot;&gt;&#39;localhost:9200/bank/account/_bulk?pretty&#39;&lt;/span&gt; --data-binary &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;@accounts&lt;/span&gt;.json&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@accounts.json&lt;/code&gt;是存在当前目录下的一个json文件,里面存储了一个josn数组,你可以让她存储任何结构相同的数组.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所有的批量操作都是使用&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;_bluk API&lt;/a&gt;来完成,上面的操作就是为&lt;code&gt;accounts.json&lt;/code&gt;里面的数据建立索引.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;除了批量操作数据之外,ES还可以对一条或多条数据进行多步骤操作.&lt;figure class=&quot;highlight scilab&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XPOST &lt;span class=&quot;string&quot;&gt;&#39;localhost:9200/blog/article/_bulk?pretty&#39;&lt;/span&gt; -d &lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&quot;&lt;/span&gt;index&lt;span class=&quot;string&quot;&gt;&quot;:&amp;#123;&quot;&lt;/span&gt;_id&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&quot;&lt;/span&gt;title&lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt;batch bulk api title &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&quot;&lt;/span&gt;update&lt;span class=&quot;string&quot;&gt;&quot;:&amp;#123;&quot;&lt;/span&gt;_id&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&quot;&lt;/span&gt;doc&lt;span class=&quot;string&quot;&gt;&quot;: &amp;#123;&quot;&lt;/span&gt;title&lt;span class=&quot;string&quot;&gt;&quot;: &quot;&lt;/span&gt;batch bulk api title &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot; &amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&quot;&lt;/span&gt;delete&lt;span class=&quot;string&quot;&gt;&quot;:&amp;#123;&quot;&lt;/span&gt;_id&lt;span class=&quot;string&quot;&gt;&quot;:&quot;&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;string&quot;&gt;&quot;&amp;#125;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;上面的批量操作一共干了三件事情:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将id是1的Document重新以新的数据重新索引,因此该Document的version会自增1&lt;/li&gt;
&lt;li&gt;更新了id是2的Document中的&lt;code&gt;title&lt;/code&gt;数据,只是更新数据,并不涉及到重新索引所以version不会变化&lt;/li&gt;
&lt;li&gt;删除了id为3的文档&lt;br&gt;更多的批处理操作可以参考&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Bulk API&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/_batch_processing.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Elasticsearch Batch Processing&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Elasticsearch Bulk API&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;前面已经介绍了如何使用ES提供的REST API去做CRUD操作,但是这些操作都是单一的.今天来介绍一下ES中的批处理,可以批量CUD索引和文档&lt;br&gt;&lt;figure class=&quot;highlight nginx&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;curl&lt;/span&gt; -XPOST &lt;span class=&quot;string&quot;&gt;&#39;localhost:9200/bank/account/_bulk?pretty&#39;&lt;/span&gt; --data-binary &lt;span class=&quot;string&quot;&gt;&quot;&lt;span class=&quot;variable&quot;&gt;@accounts&lt;/span&gt;.json&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;@accounts.json&lt;/code&gt;是存在当前目录下的一个json文件,里面存储了一个josn数组,你可以让她存储任何结构相同的数组.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所有的批量操作都是使用&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html&quot;&gt;_bluk API&lt;/a&gt;来完成,上面的操作就是为&lt;code&gt;accounts.json&lt;/code&gt;里面的数据建立索引.&lt;br&gt;
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://tedyin.me/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch CRUD</title>
    <link href="http://tedyin.me/2016/01/25/elasticsearch-crud/"/>
    <id>http://tedyin.me/2016/01/25/elasticsearch-crud/</id>
    <published>2016-01-25T02:22:00.000Z</published>
    <updated>2016-02-29T09:43:52.000Z</updated>
    
    <content type="html">&lt;p&gt;有了对ES的基本概念后,下面要做的就是了解如何与ES进行交流,ES非常贴心的提供了一套REST API让大家与他进行交流.这些API能做的事情包括以下几点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查你的集群,节点以及索引的状态信息&lt;/li&gt;
&lt;li&gt;管理你的集群,节点以及索引等的数据&lt;/li&gt;
&lt;li&gt;执行高级的搜索操作等&lt;br&gt;总之有了这套REST API你几乎可以让ES干它所能干的所有事.&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;状态查询API&quot;&gt;&lt;a href=&quot;#状态查询API&quot; class=&quot;headerlink&quot; title=&quot;状态查询API&quot;&gt;&lt;/a&gt;状态查询API&lt;/h2&gt;可以使用&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/cat.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;_cat API&lt;/a&gt;去查询集群节点索引等的状态.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;查询集群健康状态&quot;&gt;&lt;a href=&quot;#查询集群健康状态&quot; class=&quot;headerlink&quot; title=&quot;查询集群健康状态&quot;&gt;&lt;/a&gt;查询集群健康状态&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;code&gt;clur localhost:9200/_cat/health?v&lt;/code&gt;查看集群状态,返回结果里有一个&lt;code&gt;status&lt;/code&gt;的状态,它有三个值&lt;code&gt;green&lt;/code&gt;,&lt;code&gt;yellow&lt;/code&gt;,&lt;code&gt;red&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;green&lt;/code&gt;表示一切OK,可以提供搜索服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;yellow&lt;/code&gt;表示所有的索引及其他状态都正常,但是副本数据不完整,有些分片没有副本数据,但是可以提供正常的搜索服务&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;red&lt;/code&gt; 表示部分数据丢失,能提供部分搜索服务&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果你是在本机上跑一个单节点的集群,那么&lt;code&gt;status&lt;/code&gt;会是&lt;code&gt;yellow&lt;/code&gt;的是因为,如果是单个节点,ES创建索引时并不会真的去分配副本,因为将副本和分片放在同一个节点里是无意义的,所以此处会返回&lt;code&gt;yellow&lt;/code&gt;给出警告,如果当有新的Node加入,并且副本被分配到了新的节点里,这个索引的&lt;code&gt;status&lt;/code&gt;就会变成&lt;code&gt;green&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;curl localhost:9200/_cat/nodes?v&lt;/code&gt;查看节点状态&lt;/li&gt;
&lt;li&gt;&lt;code&gt;curl localhost:9200/_cat/indices?v&lt;/code&gt;查看索引状态`&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;索引和文档CRUD&quot;&gt;&lt;a href=&quot;#索引和文档CRUD&quot; class=&quot;headerlink&quot; title=&quot;索引和文档CRUD&quot;&gt;&lt;/a&gt;索引和文档CRUD&lt;/h2&gt;&lt;h3 id=&quot;目标数据&quot;&gt;&lt;a href=&quot;#目标数据&quot; class=&quot;headerlink&quot; title=&quot;目标数据&quot;&gt;&lt;/a&gt;目标数据&lt;/h3&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;New version of Elasticsearch released!&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;content&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Version 1.0 released today!&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;priority&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;tags&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;announce&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;elasticsearch&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;release&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可以看到JSON文档包含一组字段, &lt;code&gt;&amp;quot;id&amp;quot;: &amp;quot;1&amp;quot;&lt;/code&gt;一个字段,&lt;code&gt;&amp;quot;content&amp;quot;: &amp;quot;Version 1.0 released today!&amp;quot;&lt;/code&gt;另一个字段,他们都有各自的类型ES会识别出这些类型.&lt;/p&gt;
&lt;h3 id=&quot;建立索引&quot;&gt;&lt;a href=&quot;#建立索引&quot; class=&quot;headerlink&quot; title=&quot;建立索引&quot;&gt;&lt;/a&gt;建立索引&lt;/h3&gt;&lt;p&gt;ES为我们提供了一个强大的&lt;code&gt;REST API&lt;/code&gt;用来操作ES服务,使用下面的命令来为上面的数据建立索引&lt;/p&gt;
&lt;h4 id=&quot;手动指定文档唯一标识符&quot;&gt;&lt;a href=&quot;#手动指定文档唯一标识符&quot; class=&quot;headerlink&quot; title=&quot;手动指定文档唯一标识符&quot;&gt;&lt;/a&gt;手动指定文档唯一标识符&lt;/h4&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XPOST &lt;span class=&quot;string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//localhost:9200/blog/article/1 -d &#39;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;New version of Elasticsearch released!&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Version 1.0 released today!&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;priority&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;tags&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;announce&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;elasticsearch&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;release&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;blog&lt;/code&gt; &lt;code&gt;article&lt;/code&gt; &lt;code&gt;1&lt;/code&gt; 分别是我们建立的&lt;code&gt;索引&lt;/code&gt;名称 &lt;code&gt;文档&lt;/code&gt;名称 和&lt;code&gt;唯一标识符&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;执行成功后的返回结果:&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_index&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;blog&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;article&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_version&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_shards&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;&quot;total&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;&quot;successful&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;&quot;failed&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;created&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;_index: 表示建立索引的名称&lt;code&gt;blog&lt;/code&gt;(database name)&lt;/li&gt;
&lt;li&gt;_type: 表示索引的类型 &lt;code&gt;article&lt;/code&gt;(table name)&lt;/li&gt;
&lt;li&gt;_Id: 表示文档的唯一标识符 &lt;code&gt;1&lt;/code&gt; (可以理解为表的primary key)&lt;/li&gt;
&lt;li&gt;_version: 表示版本信息,该值由ES维护,每次更新索引的时候&lt;code&gt;_version&lt;/code&gt;会自动递增&lt;/li&gt;
&lt;li&gt;_shards: 表示其分片信息&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;如果重复创建Id相同的Document时,只会由ES去更新Document,相应的&lt;code&gt;_version&lt;/code&gt;也会递增&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;自动生成文档的唯一标识符&quot;&gt;&lt;a href=&quot;#自动生成文档的唯一标识符&quot; class=&quot;headerlink&quot; title=&quot;自动生成文档的唯一标识符&quot;&gt;&lt;/a&gt;自动生成文档的唯一标识符&lt;/h4&gt;&lt;p&gt;只需要将&lt;code&gt;put&lt;/code&gt;操作换成&lt;code&gt;post&lt;/code&gt;即可,ES会自动为我们的&lt;code&gt;Document&lt;/code&gt;生成唯一的标识符.&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XPOST &lt;span class=&quot;string&quot;&gt;http:&lt;/span&gt;&lt;span class=&quot;comment&quot;&gt;//localhost:9200/blog/article -d &#39;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;id&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;New version of Elasticsearch released!&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;content&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;Version 1.0 released today!&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;priority&quot;&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;tags&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;announce&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;elasticsearch&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;release&quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回结果:&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_index&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;blog&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;article&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;AVJe9pBhG_DRWvBx76jq&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_version&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_shards&quot;&lt;/span&gt;:&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;&quot;total&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;&quot;successful&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;attr&quot;&gt;&quot;failed&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;created&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;上面&lt;code&gt;AVJe9pBhG_DRWvBx76jq&lt;/code&gt;是由ES自动生成的文档的唯一标识&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;创建空的索引&quot;&gt;&lt;a href=&quot;#创建空的索引&quot; class=&quot;headerlink&quot; title=&quot;创建空的索引&quot;&gt;&lt;/a&gt;创建空的索引&lt;/h4&gt;&lt;p&gt;除了创建包含有文档和类型的索引之外,还可以穿件一个空的索引,里面不包含任何Document和Type&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XPOST &lt;span class=&quot;string&quot;&gt;localhost:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;9200&lt;/span&gt;/empty_index&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回结果:&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;acknowledged&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般情况下我们不需要这么做,直接创建正常的索引就行了,如果索引里面没有数据,那么这个索引也是多余的.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;更新文档&quot;&gt;&lt;a href=&quot;#更新文档&quot; class=&quot;headerlink&quot; title=&quot;更新文档&quot;&gt;&lt;/a&gt;更新文档&lt;/h3&gt;&lt;p&gt;在更新文档的时候,ES并不是直接对已经经过索引的文档进行修改,而是删除旧的文档,并使用新的数据重新索引&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;只更新&lt;code&gt;title&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XPOST &lt;span class=&quot;string&quot;&gt;localhost:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;9200&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/blog/&lt;/span&gt;article&lt;span class=&quot;regexp&quot;&gt;/1/&lt;/span&gt;_update?pretty -d &#39;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;doc&quot;: &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;New Title&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新&lt;code&gt;title&lt;/code&gt;, 并添加&lt;code&gt;author&lt;/code&gt;字段.&lt;/p&gt;
&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XPOST &lt;span class=&quot;string&quot;&gt;localhost:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;9200&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/blog/&lt;/span&gt;article&lt;span class=&quot;regexp&quot;&gt;/1/&lt;/span&gt;_update?pretty -d &#39;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &quot;doc&quot;: &amp;#123; &lt;span class=&quot;string&quot;&gt;&quot;title&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;New Title again !&quot;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&quot;author&quot;&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&quot;ES&quot;&lt;/span&gt; &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;span class=&quot;string&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;删除文档&quot;&gt;&lt;a href=&quot;#删除文档&quot; class=&quot;headerlink&quot; title=&quot;删除文档&quot;&gt;&lt;/a&gt;删除文档&lt;/h3&gt;&lt;p&gt;删除之前创建的index: blog, type: article, id: 1 的文档&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XDELETE &lt;span class=&quot;string&quot;&gt;localhost:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;9200&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/blog/&lt;/span&gt;article/&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;返回结果:&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: json&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;found&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_index&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;blog&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_type&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;article&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_id&quot;&lt;/span&gt;:&lt;span class=&quot;string&quot;&gt;&quot;1&quot;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_version&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;attr&quot;&gt;&quot;_shards&quot;&lt;/span&gt;:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;attr&quot;&gt;&quot;total&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;attr&quot;&gt;&quot;successful&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;attr&quot;&gt;&quot;failed&quot;&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;删除索引&quot;&gt;&lt;a href=&quot;#删除索引&quot; class=&quot;headerlink&quot; title=&quot;删除索引&quot;&gt;&lt;/a&gt;删除索引&lt;/h3&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -XDELETE &lt;span class=&quot;string&quot;&gt;localhost:&lt;/span&gt;&lt;span class=&quot;number&quot;&gt;9200&lt;/span&gt;&lt;span class=&quot;regexp&quot;&gt;/blog/&lt;/span&gt;article/&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;返回结果:&lt;br&gt;&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;#123;&lt;span class=&quot;attr&quot;&gt;&quot;acknowledged&quot;&lt;/span&gt;:&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;与创建空索引成功的返回值一样,只返回这个?,是不是意味着ES并没有真正的删除索引内部的数据呢?而是对那些数据进行了标记,然后再以后创建新的索引的时候直接覆盖掉这些数据呢?这个需要进一步研究一下.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结&quot;&gt;&lt;/a&gt;总结&lt;/h3&gt;&lt;p&gt;以上ES的REST API 都是按照下面的协议来定义的:&lt;br&gt;&lt;figure class=&quot;highlight elixir&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;curl -X&amp;lt;REST Verb&amp;gt; &amp;lt;Node&amp;gt;&lt;span class=&quot;symbol&quot;&gt;:&amp;lt;Port&amp;gt;/&amp;lt;Index&amp;gt;/&amp;lt;Type&amp;gt;/&amp;lt;ID&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/getting-started.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Elasticsearch Getting Started&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;有了对ES的基本概念后,下面要做的就是了解如何与ES进行交流,ES非常贴心的提供了一套REST API让大家与他进行交流.这些API能做的事情包括以下几点&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;检查你的集群,节点以及索引的状态信息&lt;/li&gt;
&lt;li&gt;管理你的集群,节点以及索引等的数据&lt;/li&gt;
&lt;li&gt;执行高级的搜索操作等&lt;br&gt;总之有了这套REST API你几乎可以让ES干它所能干的所有事.
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://tedyin.me/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>Elasticsearch Basic Concepts</title>
    <link href="http://tedyin.me/2016/01/24/elasticsearch-basic-concepts/"/>
    <id>http://tedyin.me/2016/01/24/elasticsearch-basic-concepts/</id>
    <published>2016-01-24T12:22:00.000Z</published>
    <updated>2016-02-29T09:43:25.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;h4 id=&quot;Cluster-集群&quot;&gt;&lt;a href=&quot;#Cluster-集群&quot; class=&quot;headerlink&quot; title=&quot;Cluster 集群&quot;&gt;&lt;/a&gt;Cluster 集群&lt;/h4&gt;&lt;p&gt;Cluster 包含了多个运行ES的节点,每个集群都有一个唯一的名字,用来区分不同的集群,含有相同&lt;code&gt;cluster name&lt;/code&gt;的&lt;code&gt;Node&lt;/code&gt;属于同一个集群&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&quot;Node-节点&quot;&gt;&lt;a href=&quot;#Node-节点&quot; class=&quot;headerlink&quot; title=&quot;Node 节点&quot;&gt;&lt;/a&gt;Node 节点&lt;/h4&gt;&lt;p&gt;运行ES的一个实例&lt;/p&gt;
&lt;h4 id=&quot;Index-索引&quot;&gt;&lt;a href=&quot;#Index-索引&quot; class=&quot;headerlink&quot; title=&quot;Index 索引&quot;&gt;&lt;/a&gt;Index 索引&lt;/h4&gt;&lt;p&gt;相当于MySql 的一个Database,他是Document的集合,每个索引都由他的名称来区分,而且他的名称全是小写的.这个名称可以代表索引,去进行查询更新删除等操作&lt;/p&gt;
&lt;h4 id=&quot;Type-类型&quot;&gt;&lt;a href=&quot;#Type-类型&quot; class=&quot;headerlink&quot; title=&quot;Type 类型&quot;&gt;&lt;/a&gt;Type 类型&lt;/h4&gt;&lt;p&gt;可以理解为Database中的一张表,在一个索引内可以定义多个Type,每一个Type都相当于是对整个索引的一个逻辑分类,就像在一个Database中可以定义多个table,每个table都相当于Database中的一个逻辑分类一样.&lt;/p&gt;
&lt;h4 id=&quot;Document-文档&quot;&gt;&lt;a href=&quot;#Document-文档&quot; class=&quot;headerlink&quot; title=&quot;Document 文档&quot;&gt;&lt;/a&gt;Document 文档&lt;/h4&gt;&lt;p&gt;相当于Table中的一行记录(元组),一个Document是ES中可以被索引的最基本的数据单元,就像Database里每条记录也是一个最基本的单元.每个Document可以包含一个或多个Field.&lt;/p&gt;
&lt;h4 id=&quot;Field-字段&quot;&gt;&lt;a href=&quot;#Field-字段&quot; class=&quot;headerlink&quot; title=&quot;Field 字段&quot;&gt;&lt;/a&gt;Field 字段&lt;/h4&gt;&lt;p&gt;与MySQL中的字段类似,但是ES中的字段是带有值的&lt;/p&gt;
&lt;h4 id=&quot;Shards-amp-Replicas-分片-amp-副本&quot;&gt;&lt;a href=&quot;#Shards-amp-Replicas-分片-amp-副本&quot; class=&quot;headerlink&quot; title=&quot;Shards &amp;amp; Replicas  分片&amp;amp;副本:&quot;&gt;&lt;/a&gt;Shards &amp;amp; Replicas  分片&amp;amp;副本:&lt;/h4&gt;&lt;p&gt;当一个Node上的索引大到该Node的磁盘无法存储这个索引或者索引太大导致搜索效率低下的时候,就可以将这个庞大的索引分成多个分片(Shards),存储在多个Node上,这样就解决了无法存储和搜索低效的问题,因此分片存在有两个中要的原因:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;可以对庞大的索引进行水平切分,这个操作类似于对大表的水平切分&lt;/li&gt;
&lt;li&gt;因为切分成了多个分片,因此就可以并行去进行查询,这样就可以提高查询效率.&lt;br&gt;对于Shards怎样去分发到多个Node,以及搜索完成后讲数据汇总到发起请求的节点,这些工作都是由ES来自动完成的,不需要我们去关心.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为服务器存在一定的宕机风险,因此如果所有的Shard都放在某个Node上,如果宕机了,索引就会丢失,因此为了解决这个问题需要对Shards进行备份生产Replica Shards 也叫做Replicas, Replica的主要作用有两个:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解决Node宕机后,索引丢失的问题&lt;/li&gt;
&lt;li&gt;提高搜索效率,因为Replicas不会放下一个Node下,所以处理搜索请求的时候多个节点可以并行对Replicas进行查询,提高吞吐量.&lt;br&gt;总得来说,每个Index可以被切分成多个分片,每个分片可以有0个或多个副本,在创建索引的时候可以指定分片数和副本数,在成功创建索引后,依然可以通过ES提供的&lt;code&gt;_cat&lt;/code&gt;API来修改副本数,但是不能去修改分片数.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;一个ES的Shard就是一个Lucene的索引,每个Lucene索引可以存储Integer.MAX_VALUE-128 = 2,147,483,519个Document. 默认情况下一个ES索引有5个分片,每个分片有1个副本,也就是说当你创建一个索引时会产生5个分片,每个分片会有1个副本,总共就相当于1个索引有10个分片.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://www.elastic.co/guide/en/elasticsearch/reference/current/_basic_concepts.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Elasticsearch Basic Concepts&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本概念&quot;&gt;&lt;a href=&quot;#基本概念&quot; class=&quot;headerlink&quot; title=&quot;基本概念&quot;&gt;&lt;/a&gt;基本概念&lt;/h3&gt;&lt;h4 id=&quot;Cluster-集群&quot;&gt;&lt;a href=&quot;#Cluster-集群&quot; class=&quot;headerlink&quot; title=&quot;Cluster 集群&quot;&gt;&lt;/a&gt;Cluster 集群&lt;/h4&gt;&lt;p&gt;Cluster 包含了多个运行ES的节点,每个集群都有一个唯一的名字,用来区分不同的集群,含有相同&lt;code&gt;cluster name&lt;/code&gt;的&lt;code&gt;Node&lt;/code&gt;属于同一个集群&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android开发中遇到的小问题汇总</title>
    <link href="http://tedyin.me/2015/05/03/android-issue/"/>
    <id>http://tedyin.me/2015/05/03/android-issue/</id>
    <published>2015-05-03T14:53:00.000Z</published>
    <updated>2016-02-29T09:29:11.000Z</updated>
    
    <content type="html">&lt;p&gt;在实际的项目开发过程中，经常会遇到一些莫名其妙的问题，或者很容易忽略的但是会造成很多麻烦的小问题，这篇帖子用来记录下这些问题，并给出注意事项或者解决方法，后续会不断更新所遇到的问题和解决方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fragment中使用onActivityResult方法无效不能有效的回调&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;解决方法&quot;&gt;&lt;a href=&quot;#解决方法&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h3&gt;在Fragment中不要使用getActivity().startActivityForResult()方法去启动Activity，而应该直接使用startActivity方法去启动Activity，否则会被挂载Fragment的Activity中的onActivityResult的方法截获，导致Fragment的onActivityResult方法无法被回调。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/6147884/onactivityresult-not-being-called-in-fragment&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考Stackoverflow&lt;/a&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;ViewPager.setCurrentItem(0)后onPageSelect方法没有被触发&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;解决方法-1&quot;&gt;&lt;a href=&quot;#解决方法-1&quot; class=&quot;headerlink&quot; title=&quot;解决方法&quot;&gt;&lt;/a&gt;解决方法&lt;/h3&gt;&lt;p&gt;调用完setCurrentItem(0)后再手动调用加载函数。原因是ViewPager内部的mCurrentItem默认值为0，设置了setCurrentItem（0）之后dispatchSelect为false认为已经调用过了onPageSelect方法，因此在第一次调用完setCurrentItem(0)时无效。&lt;/p&gt;
&lt;h3 id=&quot;参考-1&quot;&gt;&lt;a href=&quot;#参考-1&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;http://stackoverflow.com/questions/11794269/onpageselected-isnt-triggered-when-calling-setcurrentitem0&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考Stackoverflow&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在实际的项目开发过程中，经常会遇到一些莫名其妙的问题，或者很容易忽略的但是会造成很多麻烦的小问题，这篇帖子用来记录下这些问题，并给出注意事项或者解决方法，后续会不断更新所遇到的问题和解决方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Fragment中使用onActivityResult方法无效不能有效的回调
    
    </summary>
    
    
      <category term="android" scheme="http://tedyin.me/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>How To Use Jenv To Master Your Java Environnement</title>
    <link href="http://tedyin.me/2015/04/26/how-to-use-jenv/"/>
    <id>http://tedyin.me/2015/04/26/how-to-use-jenv/</id>
    <published>2015-04-26T12:22:00.000Z</published>
    <updated>2016-02-29T09:37:41.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;对于一个Java开发者来说，系统上安装多个Java版本是很常见的事，但是在各个版本之间进行切换是一件非常痛苦的事情，今天向大家介绍一个工具&lt;code&gt;Jenv&lt;/code&gt;，用它来终结我们的Java版本管理之痛。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Jenv的作用类似于rbenv，只是rbenv是用来管理系统上的不同Ruby版本的。Jenv运行在Linux或者Mac上，不能在Windows上使用（建议Win的用户转向Linux或者Mac）。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;本文以Mac系统位例进行介绍。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将代码下载到&lt;code&gt;~/.jenv&lt;/code&gt;目录下&lt;/p&gt;
&lt;figure class=&quot;highlight crmsh&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: bash&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git &lt;span class=&quot;keyword&quot;&gt;clone&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;https&lt;/span&gt;://github.com/gcuisinier/jenv.git ~/.jenv&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;将&lt;code&gt;~/.jenv/bin&lt;/code&gt;加入到&lt;code&gt;$PATH&lt;/code&gt;环境变量中&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加初始化Jenv的脚本到环境变量中&lt;/p&gt;
&lt;figure class=&quot;highlight ruby&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: bash&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ echo &lt;span class=&quot;string&quot;&gt;&#39;eval &quot;$(jenv init -)&quot;&#39;&lt;/span&gt; &lt;span class=&quot;meta&quot;&gt;&amp;gt;&amp;gt; &lt;/span&gt;~&lt;span class=&quot;regexp&quot;&gt;/.bash_profile&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重启命令行，使PATH的设置生效，现在可已使用jenv来管理JDK版本了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;使用&quot;&gt;&lt;a href=&quot;#使用&quot; class=&quot;headerlink&quot; title=&quot;使用&quot;&gt;&lt;/a&gt;使用&lt;/h1&gt;&lt;p&gt;下面介绍几个最常用的Jenv命令&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jenv version&lt;/code&gt; 显示当前正在使用的JDK版本号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jenv versions&lt;/code&gt; 显示当前系统上已将安装的所有JDK版本号&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jenv local [java version]&lt;/code&gt; 指定当前目录下要使用的JDK版本号，只在该目录及其子目录内有效，在该目录以外还是使用原有的JDK版本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jenv global [java version]&lt;/code&gt; 指定全局的JDK版本号，在整个系统中有效。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jenv info java&lt;/code&gt; 检查&lt;code&gt;JAVA_HOME&lt;/code&gt;设置是否有效，如果有效会输出&lt;code&gt;JAVA_HOME&lt;/code&gt;的路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;jenv local --unset&lt;/code&gt; 消除jenv local的设置，恢复使用默认的JDK版本&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;该项目Github地址&quot;&gt;&lt;a href=&quot;#该项目Github地址&quot; class=&quot;headerlink&quot; title=&quot;该项目Github地址&quot;&gt;&lt;/a&gt;该项目Github地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/gcuisinier/jenv&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Jenv&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;对于一个Java开发者来说，系统上安装多个Java版本是很常见的事，但是在各个版本之间进行切换是一件非常痛苦的事情，今天向大家介绍一个工具&lt;code&gt;Jenv&lt;/code&gt;，用它来终结我们的Java版本管理之痛。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h1&gt;&lt;p&gt;Jenv的作用类似于rbenv，只是rbenv是用来管理系统上的不同Ruby版本的。Jenv运行在Linux或者Mac上，不能在Windows上使用（建议Win的用户转向Linux或者Mac）。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Parcelable Vs Serializable</title>
    <link href="http://tedyin.me/2015/04/03/parcelable-vs-serializable/"/>
    <id>http://tedyin.me/2015/04/03/parcelable-vs-serializable/</id>
    <published>2015-04-03T14:28:00.000Z</published>
    <updated>2016-02-29T09:29:20.000Z</updated>
    
    <content type="html">&lt;p&gt;今天说一下对象序列化时的两个接口&lt;code&gt;Serializable&lt;/code&gt;和&lt;code&gt;Parcelable&lt;/code&gt;，前者是Java中的老面孔了，大家也都非常熟悉了，后者是Android提供的新面孔，既然Java本身就有序列化的接口为什么Android还要重新造轮子呢？当然Google也不是傻子，肯定是前面那个轮子不能满足他们的要求，所以他们才重新造出了&lt;code&gt;Parcelable&lt;/code&gt;这个接口。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Serializable接口的使用&quot;&gt;&lt;a href=&quot;#Serializable接口的使用&quot; class=&quot;headerlink&quot; title=&quot;Serializable接口的使用&quot;&gt;&lt;/a&gt;Serializable接口的使用&lt;/h2&gt;&lt;p&gt;首先来看看&lt;code&gt;Serializable&lt;/code&gt;如何使用。&lt;br&gt;&lt;figure class=&quot;highlight zephir&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SerializableClass&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;List&lt;/span&gt;&amp;lt;Skill&amp;gt; skillList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Skill&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Serializable&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String skillName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; gotIt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;好了，这样就可以直接将这个类序列化后使用Intent/Bundle进行传递了。使用起来非常简单，只需要实现&lt;code&gt;Serializable&lt;/code&gt;接口即可。&lt;code&gt;Serializable&lt;/code&gt;接口是一个标志接口，只要实现了这个接口，你就不需要做任何操作，Java会使用Reflection(反射技术)将类进行序列化和反序列化，非常的简单方便。但是有一个问题就是&lt;strong&gt;效率太低&lt;/strong&gt;,在序列化和反序列化过程中会创建许多中间对象，会使得GC多次被调用，从而影响到程序的性能，我们都知道在GC被触发后进行垃圾回收的过程中，线程是被挂起的，APP会处于无响应状态，尽管这个过程持续的时间很短很短只有几十毫秒，但如果多次重复必定会影响到用户体验，一次Google的大牛们就不淡定了，这么差的性能怎么忍得了？但是如何破呢？答案就是&lt;code&gt;Parcelable&lt;/code&gt;，他们造出了&lt;code&gt;Parcelable&lt;/code&gt;来解决这个问题。&lt;/p&gt;
&lt;p&gt;##Parcelable接口的使用&lt;br&gt;和上面一样，还是先来看看&lt;code&gt;Parcelable&lt;/code&gt;接口是如何使用的。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;81&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;ParcelableClass&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parcelable&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	String name;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; age;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; height;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	List&amp;lt;Skill&amp;gt; skillList;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Parcelable.Creator&amp;lt;ParcelableClass&amp;gt; CREATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parcelable.Creator&amp;lt;ParcelableClass&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@Overried&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ParcelableClass createFromParcel(Parcel &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ParcelableClass(&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@Overried&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		ParcelableClass[] newArray(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ParcelableClass[size];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	ParcelableClass(Parcel &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;.readString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;.readInt();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.height = &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;.readFloat();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.skillList = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; ArrayList&amp;lt;Skill&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;.readTypedList(skillList,Skill.CREATOR);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Overried&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; writeToParcel(Parcel dest, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dest.writeString(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dest.writeInt(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dest.writeFloat(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.height);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		dest.writeTypedList(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.skillList);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;meta&quot;&gt;@Overried&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; describeContents()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Skill&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parcelable&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String skillName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; gotIt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; Parcelable.Creator&amp;lt;Skill&amp;gt; CREATOR&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			= &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Parcelable.Creator&amp;lt;Skill&amp;gt;()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;meta&quot;&gt;@Overried&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Skill createFromParcel(Parcel &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Skill(&lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;meta&quot;&gt;@Overried&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			Skill[] newArray(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; size)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;				&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Skill[size];&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Skill(Parcel &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.skillName = &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;.readString();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.gotIt = &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt;.readBoolean();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@Overried&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; describeContents()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;meta&quot;&gt;@Overried&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; writeToParcel(Parcel dest, &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; flags)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dest.writeString(skillName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			dest.writeBoolean(gotIt ? 1 : &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Skill&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Parcelable&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		String skillName;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;boolean&lt;/span&gt; gotIt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;终于写完了，这比刚才使用&lt;code&gt;Serializable&lt;/code&gt;接口时的代码长了好几倍，代码的可读性也大不如刚刚的代码，但是为了性能上的提升，这么做也是值得的，与性能相比代码多点难点又算得了什么呢？何况这个代码也不是很难，而且是有迹可循的:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;每个实现了Parcelable的接口都需要实现一个&lt;code&gt;Parcelable.Creator&lt;/code&gt;对象。&lt;/li&gt;
&lt;li&gt;提供一个以Parcel为参数的构造函数。&lt;/li&gt;
&lt;li&gt;实现&lt;code&gt;describeContents()&lt;/code&gt;方法&lt;/li&gt;
&lt;li&gt;实现&lt;code&gt;writeToParcel(Parcel dest, int flags)&lt;/code&gt;方法。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;这样就OK了,下面来看看废了一番周折写出来的序列化方法到底比原生的好了多少，有图有真相！！&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/parcelable_vs_serializable.png&quot; alt=&quot;parcelable&quot;&gt;&lt;/p&gt;
&lt;p&gt;OMG !这差距，使用&lt;code&gt;Parcelable&lt;/code&gt;虽然复杂点，但是这性能提升，真是值了！&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://www.developerphil.com/parcelable-vs-serializable/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Parcelable vs Serializable&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;今天说一下对象序列化时的两个接口&lt;code&gt;Serializable&lt;/code&gt;和&lt;code&gt;Parcelable&lt;/code&gt;，前者是Java中的老面孔了，大家也都非常熟悉了，后者是Android提供的新面孔，既然Java本身就有序列化的接口为什么Android还要重新造轮子呢？当然Google也不是傻子，肯定是前面那个轮子不能满足他们的要求，所以他们才重新造出了&lt;code&gt;Parcelable&lt;/code&gt;这个接口。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android Tools Attribute</title>
    <link href="http://tedyin.me/2015/03/28/tools-usage/"/>
    <id>http://tedyin.me/2015/03/28/tools-usage/</id>
    <published>2015-03-28T14:29:00.000Z</published>
    <updated>2016-02-29T09:29:24.000Z</updated>
    
    <content type="html">&lt;p&gt;Android tools提供了一组非常有用的属性方法来方便我们开发，tools所指定的所有属性在打包的时候都不会打包到APK里，它只是辅助开发的一组工具属性，本文基于Android Studio，快捷建使用Mac OSX 10.5+ KeyMap，下面以IDE来表示Android Studio。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##tools : context&lt;br&gt;使用context属性来告诉IDE，这个布局文件是哪个Activity的布局文件，所以在预览的时候需要根据这个Activity的主题属性来显示，而不是使用默认的主题来进行预览。除了这个作用之外还有另外一点，在IDE中使用Go to Related files（快捷键CMD+Ctrl+Up）功能来帮助找到相关的布局文件。context属性在填写的时候，需要填上Activity的完整包名。&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/tools_1.png&quot; alt=&quot;p1&quot;&gt;&lt;/p&gt;
&lt;p&gt;##tools:menu&lt;br&gt;如果你已经使用了context属性指定过了对应的Activity，那么IDE默认会自己去检查OnCreateOptionsMenu里面使用了哪个menu布局，然后在预览的时候加载该布局。使用menu属性可以覆盖上述默认操作。如果不想显示menu则可以设置tools:menu=“”即可。另外还可以使用menu属性定义多个菜单资源，如果不想显示menu则可以给menu属性赋值为空，例如：tools:menu=“”即可。另外，还可以在预览的时预览任意个你想看到的menu菜单项，而不是直接预览menu布局里面的内容。实现这样的效果十分简单，只需要在menu后面写上对应的菜单项的Id并用“ , ”隔开即可。举个例子：&lt;br&gt;&lt;code&gt;tools:menu=“action_search,action_add&amp;quot;&lt;/code&gt;&lt;br&gt;还有一点需要注意的就是，在使用Theme.AppCompat时，menu这个属性不起作用。&lt;/p&gt;
&lt;p&gt;##tools:actionBarNavMod&lt;br&gt;使用该属性告诉IDE我要显示的ActionBar的模式，包含了三个选项standard、tabs、list，该属性只有在Holo主题下有用，在其他主题下无法使用。&lt;/p&gt;
&lt;p&gt;##tools:listitem，tools:listheader，tools:listfooter&lt;br&gt;从名字就可以看出他们的意思，这是一组属性，我们可以使用这些属性分别告诉IDE一下信息:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;listitem是告诉IDE这个列表里面的Item内容是什么，在预览的时候可以和Item一起预览，而不是傻傻的默认显示一行文字。&lt;/li&gt;
&lt;li&gt;listheader是告诉IDE这个列表的头部是什么，并一起预览&lt;/li&gt;
&lt;li&gt;listfooter是告诉IDE这个列表的底部是什么，并一起预览需要注意的一点是，listheader和listfooter对GridView是没有效果的。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##tools:layout&lt;br&gt;用这个属性告诉IDE，这个Layout在预览的时候应该显示什么东西，而不是显示一片空白。&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/tools_2.png&quot; alt=&quot;p2&quot;&gt;&lt;/p&gt;
&lt;p&gt;##补充：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;tools:text属性用来显示要预览的文字，预览时会覆盖text属性的内容。&lt;/li&gt;
&lt;li&gt;tools:src属性用来显示要预览的图片资源。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;#tools 中对Lint处理的属性&lt;/p&gt;
&lt;p&gt;##tools:ignore&lt;br&gt;该属性对那些有“强迫症”的患者非常有用，经常我们在布局文件中写完ImageView后，都会提示少了Description，每次看见那个小黄线的提示就会觉得非常别扭，但是有了这个属性，就不用担心了，只要在ImageView的属性设置后面加上tools:ignore=“contentDescription”即可立马解决问题。除了上述用法外，还可以用在别的想忽略警告的地方。&lt;/p&gt;
&lt;p&gt;##tools:targetApi&lt;br&gt;这个属性从名字就可以看出是用来指定API的。如果我们的minSdk是11，但是我们用了一个在API 14后才有的控件，在布局编辑器里就会报错，那么在报错的控件下面使用targetApi并指定对应的API即可解决问题。&lt;br&gt;&lt;figure class=&quot;highlight groovy&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: xml&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;ripple &lt;span class=&quot;string&quot;&gt;xmlns:&lt;/span&gt;android=&lt;span class=&quot;string&quot;&gt;&quot;http://schemas.android.com/apk/res/android&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;android:&lt;/span&gt;color=&lt;span class=&quot;string&quot;&gt;&quot;@color/accent_color&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;string&quot;&gt;tools:&lt;/span&gt;targetApi=&lt;span class=&quot;string&quot;&gt;&quot;LOLLIPOP&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;好了，tools的用法基本就介绍完了，详细的列表可以&lt;a href=&quot;http://tools.android.com/tech-docs/tools-attributes&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;参考这里&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##参考&lt;br&gt;&lt;a href=&quot;https://medium.com/sebs-top-tips/tools-of-the-trade-part-2-b91271892d10&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;英文&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0309/2567.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;中文版&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android tools提供了一组非常有用的属性方法来方便我们开发，tools所指定的所有属性在打包的时候都不会打包到APK里，它只是辅助开发的一组工具属性，本文基于Android Studio，快捷建使用Mac OSX 10.5+ KeyMap，下面以IDE来表示Android Studio。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android View Lifecycle</title>
    <link href="http://tedyin.me/2015/03/11/android-view-lifecycle/"/>
    <id>http://tedyin.me/2015/03/11/android-view-lifecycle/</id>
    <published>2015-03-11T13:00:00.000Z</published>
    <updated>2016-02-29T09:29:29.000Z</updated>
    
    <content type="html">&lt;p&gt;在Android开发中了解各个组件的生命周期非常重要，网上已经有许多关于Activity、Fragment等的生命周期的介绍了，今天来介绍一下View的生命周期。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##什么是View&lt;br&gt;先来看看官方文档的解释：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;This class represents the basic building block for user interface components. A View occupies a rectangular area on the screen and is responsible for drawing and event handling. View is the base class for widgets, which are used to create interactive UI components (buttons, text fields, etc.). The ViewGroup subclass is the base class for layouts, which are invisible containers that hold other Views (or other ViewGroups) and define their layout properties.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;也就是说View是最基础的UI组件，所有的其他的UI组件都是从View类中衍生出来的，可见View的地位是多么的高，所以需要掌握View的各个细节。&lt;/p&gt;
&lt;p&gt;##View生命周期中用到的方法&lt;/p&gt;
&lt;p&gt;###1. View的创建期：&lt;br&gt;使用View的构造函数进行创建，在这个过程中，如果有自定义的属性的话，也需要在这个期间进行处理。当View和他的子View全部从XML中inflate结束后，会调用&lt;code&gt;View#onFinishInflate()&lt;/code&gt;方法。&lt;/p&gt;
&lt;p&gt;###2. View的布局过程&lt;br&gt;整个布局过程做的就是处理View的大小和位置相关的信息。&lt;br&gt;&lt;code&gt;View#onMesure()&lt;/code&gt;方法的作用就是计算每个控件在屏幕上的尺寸大小。&lt;code&gt;View#onLayout&lt;/code&gt;方法的作用就是设置所有控件的大小和位置。&lt;br&gt;&lt;code&gt;View#onSizeChanged&lt;/code&gt;方法的作用是当View的大小改变会调用此方法。&lt;/p&gt;
&lt;p&gt;###3. View的渲染&lt;br&gt;View的渲染过程会调用onDraw方法。&lt;/p&gt;
&lt;p&gt;###4. View对事件的处理&lt;br&gt;处理View事件方法有&lt;code&gt;View#onKeyDown()&lt;/code&gt;当设备的物理按键按下后会触发该方法；&lt;code&gt;View#onKeyUp()&lt;/code&gt;当设备的物理按键弹起的时候就会触发该方法；&lt;code&gt;View#onTrackballEvent()&lt;/code&gt;当轨迹球被触动的时候会触发该方法；&lt;br&gt;&lt;code&gt;View#onTouchEvent()&lt;/code&gt;当设备的屏幕有来自用户的触摸操作时会回调该法，比如某些滑动操作我们就可以在该方法中拦截处理，可以根据用户的不同滑动距离和滑动速度等用户操作，给出许多不同的反馈，提供更好的用户体验。&lt;/p&gt;
&lt;p&gt;###5. View对焦点的处理&lt;br&gt;处理焦点相关事件的回调方法为&lt;code&gt;View#onFocusChanged()&lt;/code&gt;当控件的焦点发生改变，会触发该方法。&lt;/p&gt;
&lt;p&gt;###6. View在根节点上的挂载和删除&lt;br&gt;当View通过构造函数创建出来后，如果不挂载到Window上时，是无法显示出来的。当View要挂载到Window上时会调用&lt;code&gt;Veiw#onAttachedToWindow()&lt;/code&gt;方法；当View被销毁后要从Window上去除时会调用&lt;code&gt;View#onDetachedFromWindow()&lt;/code&gt;方法；当Window隐藏或者可见时会调用&lt;code&gt;View#onWindowVisibilityChanged()&lt;/code&gt;方法。通过这几个方法我们可以处理一些初始化的操作，和一些在View被销毁后进行的内存回收或者善后的工作。&lt;/p&gt;
&lt;p&gt;##View的生命周期示意图&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/view_lifecycle.png&quot; alt=&quot;view_lifecycle&quot;&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在Android开发中了解各个组件的生命周期非常重要，网上已经有许多关于Activity、Fragment等的生命周期的介绍了，今天来介绍一下View的生命周期。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android UI Tips</title>
    <link href="http://tedyin.me/2015/01/18/android-ui-tips/"/>
    <id>http://tedyin.me/2015/01/18/android-ui-tips/</id>
    <published>2015-01-18T15:30:00.000Z</published>
    <updated>2016-02-29T09:29:47.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips:&quot;&gt;&lt;/a&gt;Tips:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用SparseArray代替HashMap等容器类。&lt;/li&gt;
&lt;li&gt;能复用时一定要复用，不能复用时尽量复用。复用一切！&lt;/li&gt;
&lt;li&gt;使用静态工厂方法去获取对象（使用Message时不要自己去new Message，要使用Message.obtain()方法去获取）这样可以减少不必要的对象，复用已有的对象。&lt;/li&gt;
&lt;li&gt;使用一个全局变量代替多个临时变量。&lt;/li&gt;
&lt;li&gt;使用Handler、AsyncTask、Loader、IntentService处理异步任务，而非仅使用java.concurrent包&lt;/li&gt;
&lt;li&gt;给你的线程一个优先级，如果是处理后台任务的线程，设置他的优先级为Background。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于ListView的3种状态进行处理，从而优化代码，提升性能。(例如在滑动过程中停止图片的加载，等恢复正常后再继续加载图)&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h3 id=&quot;总结&quot;&gt;&lt;a href=&quot;#总结&quot; class=&quot;headerlink&quot; title=&quot;总结:&quot;&gt;&lt;/a&gt;总结:&lt;/h3&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;不要阻塞Main Thread（UI Thread）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;扁平化你的布局层次（能用一个Layout最好，可以使用merge代替FrameLayout）&lt;/li&gt;
&lt;li&gt;能复用就尽量复用一切可复用的东西。&lt;/li&gt;
&lt;li&gt;延迟加载一些不需要立即使用的内容。&lt;/li&gt;
&lt;li&gt;对你的Thread或者Task设置优先级，UI任务和Thread永远是最高级。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考:&quot;&gt;&lt;/a&gt;参考:&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://speakerdeck.com/cyrilmottier/optimizing-android-ui-pro-tips-for-creating-smooth-and-responsive-apps&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android UI Tips&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Tips&quot;&gt;&lt;a href=&quot;#Tips&quot; class=&quot;headerlink&quot; title=&quot;Tips:&quot;&gt;&lt;/a&gt;Tips:&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;使用SparseArray代替HashMap等容器类。&lt;/li&gt;
&lt;li&gt;能复用时一定要复用，不能复用时尽量复用。复用一切！&lt;/li&gt;
&lt;li&gt;使用静态工厂方法去获取对象（使用Message时不要自己去new Message，要使用Message.obtain()方法去获取）这样可以减少不必要的对象，复用已有的对象。&lt;/li&gt;
&lt;li&gt;使用一个全局变量代替多个临时变量。&lt;/li&gt;
&lt;li&gt;使用Handler、AsyncTask、Loader、IntentService处理异步任务，而非仅使用java.concurrent包&lt;/li&gt;
&lt;li&gt;给你的线程一个优先级，如果是处理后台任务的线程，设置他的优先级为Background。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对于ListView的3种状态进行处理，从而优化代码，提升性能。(例如在滑动过程中停止图片的加载，等恢复正常后再继续加载图)&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用反射自定义SearchView</title>
    <link href="http://tedyin.me/2015/01/02/use-reflect-modify/"/>
    <id>http://tedyin.me/2015/01/02/use-reflect-modify/</id>
    <published>2015-01-02T02:00:00.000Z</published>
    <updated>2016-02-29T09:29:59.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在优化代码，发现Android support v7包中的SearchView，开放的方法很少，导致SearchView自定义比较麻烦。所以在网上搜索解决办法，发现借助Java强大的反射功能来动态修改SearchView是最合适的方法。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;下面来举个例子来说明一下如何使用反射来实现自定义SearchView的效果：&lt;/p&gt;
&lt;p&gt;比如SearchView中展开后的底部Hint背景有一个搜索的图标，但是我们要是想隐藏该图标是没有办法直接隐藏的，因此我们可以使用反射来进行动态修改，为了可以使用反射，因此我们要查看SearchView的源码然后找出该图标的所属控件，然后使用反射动态修改该控件的属性，从而达到隐藏该图标的目的。&lt;br&gt;下面来看下具体步骤：&lt;/p&gt;
&lt;p&gt;###查看源码&lt;br&gt;经过查看SearchView的源码，我们发现这个图标是SearchView中的 SearchAutoComplete的Hint属性，源码如下：&lt;br&gt;&lt;figure class=&quot;highlight axapta&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mQueryHint != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mQueryTextView.setHint(getDecoratedHint(mQueryHint));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (mSearchable != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    CharSequence &lt;span class=&quot;keyword&quot;&gt;hint&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; hintId = mSearchable.getHintId();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (hintId != &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;hint&lt;/span&gt; = getContext().getString(hintId);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;hint&lt;/span&gt; != &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        mQueryTextView.setHint(getDecoratedHint(&lt;span class=&quot;keyword&quot;&gt;hint&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    mQueryTextView.setHint(getDecoratedHint(&lt;span class=&quot;string&quot;&gt;&quot;&quot;&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;###使用反射修改SearchView&lt;br&gt;从上述代码可以看出，显示Hint的是&lt;code&gt;mQueryHint&lt;/code&gt;,因此只要将这个Hint值设为“”空字符串就可以隐藏该icon。下面使用反射的方式获取mQueryTextView这个private级别的控件,并将Hint设为空字符串，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight aspectj&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;hideCloseSearchIcon&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(SearchView searchView)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	SearchAutoComplete mQueryTextView = (SearchAutoComplete) SystemUiHelper.getFieldByReflect(&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;			&lt;span class=&quot;string&quot;&gt;&quot;mQueryTextView&quot;&lt;/span&gt;, SearchView.class, searchView);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	mQueryTextView.setHint(R.string.hint_search);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;Object &lt;span class=&quot;title&quot;&gt;getFieldByReflect&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(String fieldName, Class&amp;lt;?&amp;gt; claz, Object &lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		Field searchField = claz.getDeclaredField(fieldName);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		searchField.setAccessible(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; searchField.&lt;span class=&quot;title&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;target&lt;/span&gt;)&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (NoSuchFieldException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IllegalAccessException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样就可以将SearchView中输入框旁边的icon去掉了，下面看下对比图：&lt;/p&gt;
&lt;p&gt;去掉之前的样子：&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/search1.png&quot; alt=&quot;search1&quot;&gt;&lt;br&gt;去掉之后的样子：&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/search2.png&quot; alt=&quot;search2&quot;&gt;&lt;/p&gt;
&lt;p&gt;同理，可以使用反射做很多类似的修改和操作,只有你想不到的没有你做不到的。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在优化代码，发现Android support v7包中的SearchView，开放的方法很少，导致SearchView自定义比较麻烦。所以在网上搜索解决办法，发现借助Java强大的反射功能来动态修改SearchView是最合适的方法。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android HttpURLConnection VS HttpClient</title>
    <link href="http://tedyin.me/2014/12/22/httpclient-urlconnection/"/>
    <id>http://tedyin.me/2014/12/22/httpclient-urlconnection/</id>
    <published>2014-12-22T15:40:00.000Z</published>
    <updated>2016-02-29T09:30:19.000Z</updated>
    
    <content type="html">&lt;p&gt;在Android中提供了两种Http操作的封装，一种使用HttpURLConnection去进行网络操作，另外一种是使用HttpClient进行网络操作的处理，这两者在Android中共存，但是官方建议使用HttpURLConnection来进行网络处理。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##HttpClient与HttpURLConnection在Android中的比较&lt;/p&gt;
&lt;p&gt;Android中直接封装了Apache的HttpClient来作为网络操的处理类，该类是非常强大的类，比较重量级，功能和方法非常丰富，因此带来了一个问题，那就是定制性非常差，修改起来非常麻烦。相比而言HttpURLConnection要轻量许多，方法较少而且都比较简单，因此定制性更强，修改起来容易，Android团队内部也更倾向使用定制性更好的HttpURLConnection来进行网络处理。&lt;/p&gt;
&lt;p&gt;但是因为在FROYO版本以及之前版本，Android对HttpURLConnection支持不好，HttpURLConnection有许多bug，所以在2.3版本之前建议使用HttpClient来进行网络操作。在FROYO以及之后的版本Android修复了HttpURLConnection的许多问题，而且在4.0之后HttpURLConnection还加入了对缓存的支持，使用下面方法可以在4.0版本中开启Http缓存:&lt;/p&gt;
&lt;figure class=&quot;highlight gradle&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; enableHttpResponseCache()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;		&lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt; httpCacheSize = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt; * &lt;span class=&quot;number&quot;&gt;1024&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// 10 MiB&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt; httpCacheDir = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;(getCacheDir(), &lt;span class=&quot;string&quot;&gt;&quot;http&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	    &lt;span class=&quot;keyword&quot;&gt;Class&lt;/span&gt;.forName(&lt;span class=&quot;string&quot;&gt;&quot;android.net.http.HttpResponseCache&quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        .getMethod(&lt;span class=&quot;string&quot;&gt;&quot;install&quot;&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;File&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;long&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	        .invoke(&lt;span class=&quot;keyword&quot;&gt;null&lt;/span&gt;, httpCacheDir, httpCacheSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;cache(Exception httpResponseCacheNotAvailable)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在客户端配置好缓存处理后，同样需要在服务端进行配置支持HttpCache，否则Cache是不会生效的。&lt;br&gt;在2.3以及以后的版本中，HttpURLConnection默认是支持&lt;code&gt;Accept-Type:gzip&lt;/code&gt;的，只需要在服务端配置一下即可，在消息传输和获取的过程中使用压缩数据进行传输，这样会更加快速的传递数据，而且省电省流量。但是如果服务端支持gzip格式数据传输，那么在使用&lt;code&gt;getContentLength()&lt;/code&gt;方法获取的就是压缩后的数据大小，这一定要注意。&lt;/p&gt;
&lt;p&gt;##到底使用哪一个？&lt;br&gt;上面已经说的很明确了，在2.3版本之前使用HttpClient进行网络请求，在FROYO版本之后使用HttpURLConnection进行网络请求，因为2.3以前的版本市场份额已经很小很小了，所以在以后的开发中可以略去选择直接使用HttpURLConnection进行网络操作，而且Android官方也会持续改进HttpURLConnection在Android中的性能。&lt;/p&gt;
&lt;p&gt;##参考&lt;br&gt;(参考)[&lt;a href=&quot;http://android-developers.blogspot.tw/2011/09/androids-http-clients.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://android-developers.blogspot.tw/2011/09/androids-http-clients.html&lt;/a&gt;]&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在Android中提供了两种Http操作的封装，一种使用HttpURLConnection去进行网络操作，另外一种是使用HttpClient进行网络操作的处理，这两者在Android中共存，但是官方建议使用HttpURLConnection来进行网络处理。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ViewPager PageTransformer 应用</title>
    <link href="http://tedyin.me/2014/12/21/pager-transformer/"/>
    <id>http://tedyin.me/2014/12/21/pager-transformer/</id>
    <published>2014-12-21T13:07:00.000Z</published>
    <updated>2016-02-29T09:30:22.000Z</updated>
    
    <content type="html">&lt;p&gt;最近项目中要有个需求就是做出一个可以滑动的列表，类似于Paper效果的动画，期初设想的比较复杂，自定义监控ViewPager的OnScroll事件，然后再在onPageScrolled中根据&lt;code&gt;position&lt;/code&gt;, &lt;code&gt;positionOffset&lt;/code&gt;, &lt;code&gt;positionOffsetPixels&lt;/code&gt;等数据就算出滑动的百分比，通过滑动的百分比来控制动画播放的百分比。这样虽然也可以实现想要的效果，但是会很复杂，有许多中间状态需要我们自己计算和保存，维护起来非常麻烦。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;在这些复杂的实现后，在朋友的建议下使用了&lt;code&gt;ViewPager.PageTransformer&lt;/code&gt;来重新实现上述效果，瞬间简单了许多，很多中间状态不许需要自己去维护，PagerTransformer会帮你去维护，并且在他提供的方法中&lt;code&gt;transformPage(View page, float position)&lt;/code&gt;已经帮你计算好了滑动百分比，根本不需要你再去计算，这个简直太贴心了。其实在滑动过程中对UI修改最重要的也是最麻烦的就是去计算滑动的百分比，现在有了这个百分比，你想实现什么动画就实现什么动画，简直太爽了。&lt;/p&gt;
&lt;p&gt;在使用ViewPager.PageTransformer的时候需要注意的就是他的接口方法中的postion，只要理解了它的用法，PageTransformer才算是用熟了。首先来介绍下position的用法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;position 是一个float值，它代表了一个页面离开屏幕的百分比，以及另一个页面进入的百分比&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;position = 0  : page完全被展示，也就是说page处于屏幕的正中间&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;position = 1  : page完全处于屏幕的右边&lt;/li&gt;
&lt;li&gt;position = -1 : page完全处于屏幕的左边&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果用户拖拽position=0(当前屏幕正中央的page)的page从右往左滑动，当只滑动一半的时候，原来position = 0的page其position会由0逐渐变为 -0.5，position=1的page（屏幕右侧的page）其position会由1逐渐变为 0.5。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：&lt;br&gt;从右往左滑 &amp;lt;——  position为负数&lt;br&gt;从左往右滑 ——&amp;gt;  position为正数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;好了理解了上面所讲的内容就可以真正的去做出漂亮的动画了，下面给一个动画实例&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; RotatePageTransformer implements ViewPager.PageTransformer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; MIN_TRAN = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; MIN_ROTATE = &lt;span class=&quot;number&quot;&gt;15&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    @Override&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; transformPage(View view, &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt; &amp;lt;= &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; rotateFactor = MIN_ROTATE * &lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; tranFactor = MIN_TRAN * &lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;position&lt;/span&gt; &amp;lt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                view.setTranslationY(-tranFactor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125; &lt;span class=&quot;built_in&quot;&gt;else&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;                view.setTranslationY(tranFactor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            view.setRotation(rotateFactor);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;该动画的效果如下：&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/page1.png&quot; alt=&quot;page1&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/page2.png&quot; alt=&quot;page2&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/page3.png&quot; alt=&quot;page3&quot;&gt;&lt;/p&gt;
&lt;p&gt;在滑动的过程总中左边和右边的会以此导向一个方向并且在Y方向上有一定位移，等到中间后图片的夹角会消失，而且会向上移动一定的距离。&lt;/p&gt;
&lt;p&gt;好了，赶紧去体验一下ViewPager.PageTransformer吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近项目中要有个需求就是做出一个可以滑动的列表，类似于Paper效果的动画，期初设想的比较复杂，自定义监控ViewPager的OnScroll事件，然后再在onPageScrolled中根据&lt;code&gt;position&lt;/code&gt;, &lt;code&gt;positionOffset&lt;/code&gt;, &lt;code&gt;positionOffsetPixels&lt;/code&gt;等数据就算出滑动的百分比，通过滑动的百分比来控制动画播放的百分比。这样虽然也可以实现想要的效果，但是会很复杂，有许多中间状态需要我们自己计算和保存，维护起来非常麻烦。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单例模式的使用</title>
    <link href="http://tedyin.me/2014/12/14/singlton/"/>
    <id>http://tedyin.me/2014/12/14/singlton/</id>
    <published>2014-12-14T15:20:00.000Z</published>
    <updated>2016-02-29T09:30:29.000Z</updated>
    
    <content type="html">&lt;p&gt;单例模式大家应该已经很熟悉了，但是在使用单例模式的时候，我们经常会忽略一个问题，那就是多线程情况下的单例模式的使用。一般单例模式的实现会有下面两种，分别是懒汉式和饿汉式。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##懒汉式实现&lt;br&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//懒汉式实现&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public&lt;/span&gt; class Singleton&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt; private&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; Singleton&lt;span class=&quot;built_in&quot;&gt; instance &lt;/span&gt;= null;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt; private&lt;/span&gt; Singleton()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; newInstance()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        if(null == instance)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;           &lt;span class=&quot;built_in&quot;&gt; instance &lt;/span&gt;=&lt;span class=&quot;built_in&quot;&gt; new &lt;/span&gt;Singleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt; return &lt;/span&gt;instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; void doSomething()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Do something ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;##饿汉式&lt;br&gt;&lt;figure class=&quot;highlight smali&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//饿汉式&lt;span class=&quot;keyword&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public&lt;/span&gt; class Singleton&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt; private&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; Singleton&lt;span class=&quot;built_in&quot;&gt; instance &lt;/span&gt;=&lt;span class=&quot;built_in&quot;&gt; new &lt;/span&gt;Singleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt; private&lt;/span&gt; Singleton()&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt; static&lt;/span&gt; Singleton newInstance()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       &lt;span class=&quot;built_in&quot;&gt; return &lt;/span&gt;instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;   &lt;span class=&quot;keyword&quot;&gt; public&lt;/span&gt; void doSomething()&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        // Do something ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;     &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;懒汉式和饿汉式的最大区别就是加载单例的时机的不同，也就是说空间和时间的问题。懒汉式是用空间换时间的典型，相反的饿汉式就是使用时间换空间的典型，上面的例子只是举了一个很简单的情况，假如这个单例对象很大非常占用内存，那么选择上述两种方式就会有很大的不同，要根据情况而确定到底使用哪一种。&lt;/p&gt;
&lt;p&gt;但是不论选择上面的哪一种都会有一个问题那就是在多线程的情况下，如果是首次加载单例，就会出现生成多个单例的情况，这样如果是生成一个很大的单例对象的时候，加入这个单例对象的构造过程很复杂很耗时，那么在多线程情况下就会很容易出错，而且很耗内存，那么如何使用线程安全的单例模式呢？我们可以使用JVM自身来加载我们的单例模式，这样JVM自身在Load类的时候是线程安全的，因此我们可以利用这点写出线程安全的类。&lt;/p&gt;
&lt;p&gt;##线程安全的类&lt;br&gt;&lt;figure class=&quot;highlight cs&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//内部类，在装载该内部类时才会去创建单利对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SingletonHolder&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton instance = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Singleton();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Singleton&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; Singleton &lt;span class=&quot;title&quot;&gt;newInstance&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; SingletonHolder.instance;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doSomething&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//do something&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;利用JVM自身的特性之后，我们就再也不用担心多线程下单例模式的加载问题了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;单例模式大家应该已经很熟悉了，但是在使用单例模式的时候，我们经常会忽略一个问题，那就是多线程情况下的单例模式的使用。一般单例模式的实现会有下面两种，分别是懒汉式和饿汉式。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Irregular Shape</title>
    <link href="http://tedyin.me/2014/11/15/irregular-shape-1/"/>
    <id>http://tedyin.me/2014/11/15/irregular-shape-1/</id>
    <published>2014-11-15T15:52:00.000Z</published>
    <updated>2016-02-29T09:30:33.000Z</updated>
    
    <content type="html">&lt;p&gt;接下来几周的内容是一系列文章，来讲解Android中不规则图形的创建和使用。今天先来介绍一下圆角图片的实现。&lt;/p&gt;
&lt;p&gt;有一个好消息要告诉大家，那就是在API 20中Android已经默认提供了圆角矩形的图片，RoundRectShape Drawable，但是不好的消息是大多数的人的手机版本都是20或者以上的，因此还是自己动手丰衣足食吧。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;br&gt;实现这种效果的方式有很多先来讨论第一种，最笨效果最差的实现。&lt;/p&gt;
&lt;h2 id=&quot;使用图层方式实现&quot;&gt;&lt;a href=&quot;#使用图层方式实现&quot; class=&quot;headerlink&quot; title=&quot;使用图层方式实现&quot;&gt;&lt;/a&gt;使用图层方式实现&lt;/h2&gt;&lt;p&gt;使用这种方法实现的话，我们需要使用到两张图片，一张是原图，另外一张就是与原图大小尺寸完全相同的模板图片比如下面两幅：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/dog.jpg&quot; alt=&quot;dog&quot;&gt;&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/mask.png&quot; alt=&quot;mask&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里使用绿色的原因只是为了大家看的清楚而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有了这两张图之后，我们可以加载这两张图片到内存中，然后使用&lt;code&gt;PoterDuffXfermode&lt;/code&gt;类来将这两个图片合成为一张图片，就可以生成一个圆角图片的效果了。具体的代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public Bitmap combineImage(Bitmap srcBitmap, Bitmap maskBitmap)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Bitmap resultBmp&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt; = srcBitmap.getWidth()&amp;gt;maskBitmap.getWidth()?srcBitmap.getWidth():maskBitmap.getWidth()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; height = srcBitmap.getHeight()&amp;gt;maskBitmap.getHeight()?srcBitmap.getHeight():maskBitmap.getHeight()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	resultBmp = Bitmap.createBitmap(&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;,height,Bitmap.Config.ARGB_8888)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Paint paint = new Paint()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	paint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode_SRC_ATOP))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Canvas canvas = new Canvas(resultBmp)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	canvas.drawBitmap(srcBitmap, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, null)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvas.drawBitmap(maskBitmap, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, paint)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;合成后的效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/dog_mask.jpg&quot; alt=&quot;dog_mask&quot;&gt;&lt;/p&gt;
&lt;p&gt;OK，圆角矩形图片效果实现。但是这个方法实质上是最差劲的，它有如下几个缺点:&lt;/p&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;如果图片的形状有很多种，我们需要为每种图片都生成一张mask图片，这样效率会很低，而且工作量会加大很多。&lt;/li&gt;
&lt;li&gt;适配性会变得很差，如果是圆角矩形图片，在大屏手机上拉伸回导致圆角效果失真。&lt;/li&gt;
&lt;li&gt;还有个最大的问题，就是性能问题，如果图片尺寸很大，我们加载到内存中很可能出现内存溢出的情况，这样就得不偿失了。&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;因此这个方法的可用性较低，不推荐使用。但是此处为什么要介绍这个方法呢，最主要的是这个处理思路，我们可以使用上述的而方法来处理一些水印效果或者其他图片合成的效果，这样才是上述方法最好的使用方式。&lt;/p&gt;
&lt;p&gt;接下来看看如何使用高效的方法创建圆角矩形。&lt;/p&gt;
&lt;p&gt;##使用BitmapShader来创建圆角矩形&lt;br&gt;先来介绍一下使用BitmapShader的思路，其实这个很类似于我们平常使用Canvas画图形的方式，只是我们平时在画圆角矩形时填充Canvas的是纯色，这里为了得到圆角图片，我们可以使用上面的思路，将填充物由纯色改为我们要画的图片即可。具体的实现方式如下：&lt;br&gt;&lt;figure class=&quot;highlight armasm&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;symbol&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;Bitmap &lt;/span&gt;processBitmap(&lt;span class=&quot;keyword&quot;&gt;Bitmap &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bitmap) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;Bitmap &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	&lt;span class=&quot;keyword&quot;&gt;bmp &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;Bitmap.createBitmap(bitmap.getWidth(), &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bitmap.getHeight(), &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;Bitmap.Config.ARGB_8888);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	&lt;span class=&quot;keyword&quot;&gt;BitmapShader &lt;/span&gt;shader = new &lt;span class=&quot;keyword&quot;&gt;BitmapShader(bitmap, &lt;/span&gt;Shader.TileMode.CLAMP, Shader.TileMode.CLAMP)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	// 随机设置一个圆角的半径大小&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	float raidus = getResources().getDisplayMetrics().density * &lt;span class=&quot;number&quot;&gt;6&lt;/span&gt; + &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;.&lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;f&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	Canvas canvas = new Canvas(&lt;span class=&quot;keyword&quot;&gt;bmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	Paint paint = new Paint()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	paint.setAntiAlias(true)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	paint.setShader(shader)&lt;span class=&quot;comment&quot;&gt;; // 将要填充的shader交给Paint&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	RectF rect = new RectF(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;keyword&quot;&gt;bitmap.getWidth(), &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bitmap.getHeight());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;	canvas.drawRoundRect(rect, raidus, raidus, paint)&lt;span class=&quot;comment&quot;&gt;;// 在RectF上绘制圆角图片&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;	return &lt;span class=&quot;keyword&quot;&gt;bmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;使用上述代码即可实现圆角矩形的绘制，绘制的结果如下：&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/dog2.png&quot; alt=&quot;dog2&quot;&gt;&lt;/p&gt;
&lt;p&gt;同样的道理，我们可以使用上述方式，绘制出三角形，椭圆，多边形等各种各样的图片，思路和绘制圆角矩形是一样的。都是使用RectF来确定大体形状，然后使用带有BitmapShader的Paint来填充即可实现。&lt;/p&gt;
&lt;p&gt;上面介绍了如何创建圆角矩形的方法，下面来介绍一下不规则图形的方法。&lt;/p&gt;
&lt;p&gt;###创建聊天气泡背景效果的图片&lt;/p&gt;
&lt;p&gt;创建这类图片的大体思路和上面是一致的，也是要使用&lt;code&gt;BitmapShader&lt;/code&gt;这个类来进行。实现思路如下，我们可以先创建一个圆角矩形的图片，然后再在这个圆角矩形的基础之上绘制一个三角形，就可以实现带有气泡效果的图片了。现在已经知道了如何去画一个圆角矩形，那么一半工作已经算是完成了，下来要做的就是再绘制出一个三角形，然后和圆角矩形拼接在一起即可。但是现在有一个问题，&lt;code&gt;Canvas&lt;/code&gt;并没有提供画三角形的方法，我们怎么办呢？在Canvas中提供了两个基本方法&lt;code&gt;movetTo()&lt;/code&gt;和&lt;code&gt;lineTo()&lt;/code&gt;方法，这两个方法可以让我们移动画笔画出直线，这样的话我们就可以使用这两个方法来自己动手画出三角形了（其实和Canvas封装的方法一样，只是要自己动手，显得有些麻烦）。是不是觉得很爽呢？其实这样做是有问题的，这样做智能画出一个三角形的轮廓，不会填充成一个完整的三角形。幸亏另外一个类也支持这些方法，那就是&lt;code&gt;Path&lt;/code&gt;类，我们可以使用&lt;code&gt;Path&lt;/code&gt;类画出一个路径，然后使用&lt;code&gt;Shader&lt;/code&gt;来填充这个路径所包围的空间（路径类似于PhotoShop中的选区的概念）。有了这么一个牛逼的类，理论上讲我们是什么都可以画出来的，只要你能勾勒出那个路径，我们就能画出来。&lt;/p&gt;
&lt;p&gt;好了，废话那么多下来看看如何用代码来是想上述气泡图片。&lt;/p&gt;
&lt;p&gt;首先来画三角形的路径&lt;/p&gt;
&lt;figure class=&quot;highlight processing&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 新建一个Path类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Path &lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 下来从0点开始一次画三条线，最终首尾相连，形成一个三角形&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.moveTo(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, TRIANGLE_OFFSET);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.lineTo(TRIANGLE_WIDTH,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TRIANGLE_OFFSET - (TRIANGLE_HEIGHT / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.lineTo(TRIANGLE_WIDTH,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    TRIANGLE_OFFSET + (TRIANGLE_HEIGHT / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 然后close这个Path，这样一个三角形的Path就绘制完成了&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.close();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;画完三角形的Path后，下面要做的就是，将该路径所围成的图像画在圆角矩形上，然后再用Shader填充即可。&lt;br&gt;完整代码如下&lt;br&gt;&lt;figure class=&quot;highlight processing&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt; RADIUS_FACTOR = &lt;span class=&quot;number&quot;&gt;8.0&lt;/span&gt;f;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; TRIANGLE_WIDTH = &lt;span class=&quot;number&quot;&gt;120&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; TRIANGLE_HEIGHT = &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; TRIANGLE_OFFSET = &lt;span class=&quot;number&quot;&gt;300&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; Bitmap processImage(Bitmap bitmap) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Bitmap bmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    bmp = Bitmap.createBitmap(bitmap.getWidth(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bitmap.getHeight(), Bitmap.Config.ARGB_8888);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    BitmapShader &lt;span class=&quot;built_in&quot;&gt;shader&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BitmapShader(bitmap,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BitmapShader.TileMode.CLAMP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        BitmapShader.TileMode.CLAMP);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;float&lt;/span&gt; radius = Math.&lt;span class=&quot;built_in&quot;&gt;min&lt;/span&gt;(bitmap.getWidth(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bitmap.getHeight()) / RADIUS_FACTOR;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Canvas canvas = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Canvas(bmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Paint paint = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Paint();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    paint.setAntiAlias(&lt;span class=&quot;keyword&quot;&gt;true&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    paint.setShader(&lt;span class=&quot;built_in&quot;&gt;shader&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    RectF &lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; RectF(TRIANGLE_WIDTH, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        bitmap.getWidth(), bitmap.getHeight());&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvas.drawRoundRect(&lt;span class=&quot;built_in&quot;&gt;rect&lt;/span&gt;, radius, radius, paint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    Path &lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Path();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.moveTo(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, TRIANGLE_OFFSET);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.lineTo(TRIANGLE_WIDTH,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TRIANGLE_OFFSET - (TRIANGLE_HEIGHT / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.lineTo(TRIANGLE_WIDTH,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        TRIANGLE_OFFSET + (TRIANGLE_HEIGHT / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;.close();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    canvas.drawPath(&lt;span class=&quot;built_in&quot;&gt;triangle&lt;/span&gt;, paint);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; bmp;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;最终得到的效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/dog3.jpg&quot; alt=&quot;dog3&quot;&gt;&lt;/p&gt;
&lt;p&gt;只要用好Path、Shader以及Canvas类，理论上什么图形都可以实现。&lt;/p&gt;
&lt;p&gt;##终结&lt;br&gt;上面说了Path、Shader、Rect、Canvas等，下面我们就可以是用上述介绍的方法和类来实现一些更加复杂的图形，作为这篇文章的终结。下面我们用上述介绍的内容来绘制一张心形的图片。&lt;br&gt;首先说一下绘制心形图片的思路，其实这个思路和上面绘制图片的思路大同小异，最主要的思想就是使用Path画出路径，然后使用Shader来填充这个路径包围的部分。&lt;/p&gt;
&lt;p&gt;大体上我们将绘制步骤分为下面4步&lt;/p&gt;
&lt;p&gt;###创建好画布(Canvas)、画笔(Paint)以及要绘制图像的区域Bitmap&lt;br&gt;&lt;figure class=&quot;highlight mipsasm&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;Bitmap &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;bmp &lt;/span&gt;= &lt;span class=&quot;keyword&quot;&gt;Bitmap.createBitmap(bitmap.getWidth(),&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;bitmap.getHeight(), &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;Bitmap.Config.ARGB_8888);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;BitmapShader &lt;/span&gt;&lt;span class=&quot;keyword&quot;&gt;shader &lt;/span&gt;= new &lt;span class=&quot;keyword&quot;&gt;BitmapShader(bitmap,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;BitmapShader.TileMode.CLAMP,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;keyword&quot;&gt;BitmapShader.TileMode.CLAMP);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Canvas canvas = new Canvas(&lt;span class=&quot;keyword&quot;&gt;bmp);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;Paint paint = new Paint()&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;paint.setAntiAlias(true)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;paint.setShader(&lt;span class=&quot;keyword&quot;&gt;shader);&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;因为后面要绘制不规则图形路径，有一些需要计算的地方，因此我们需要将&lt;code&gt;bitmap&lt;/code&gt;的宽高记录下来。&lt;br&gt;&lt;figure class=&quot;highlight arduino&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; = bitmap.getWidth();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt; = bitmap.getHeight();&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;保存好宽高后，下来需要初始化Path，Region以及Matrix，这些都会在绘制心形图案时用到。&lt;br&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Path oval = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; Path();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Matrix &lt;span class=&quot;built_in&quot;&gt;matrix&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; Matrix();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Region &lt;span class=&quot;built_in&quot;&gt;region&lt;/span&gt; = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; Region();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;RectF ovalRect = &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; RectF(&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; - (&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;), &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;下面来开始绘制心形图案的第二步，先绘制一个椭圆，这个椭圆的高度与我们的&lt;code&gt;bitmap&lt;/code&gt;的高度一样，宽度是&lt;code&gt;bimap&lt;/code&gt;的四分之三，这个宽度是来决定心形图片的宽窄的，可自行定义。&lt;br&gt;下面来绘制椭圆Path&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;RectF ovalRect = new RectF(&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt; - (&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;8&lt;/span&gt;), height)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;oval.addOval(ovalRect, Path.Direction.CW)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;这个&lt;code&gt;oval&lt;/code&gt;就是上面已经定义过的椭圆路径，在此处进行填充，这个路径渲染出来的效果如下：&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/dog4.jpg&quot; alt=&quot;dog4&quot;&gt;&lt;/p&gt;
&lt;p&gt;绘制出椭圆后，下来我们将其进行旋转，使用上面定义好的&lt;code&gt;Matrix&lt;/code&gt;对象来完成旋转的操作：&lt;br&gt;&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;matrix&lt;/span&gt;.postRotate(&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;oval.&lt;span class=&quot;built_in&quot;&gt;transform&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;matrix&lt;/span&gt;, oval);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;Matrix是一个很强大的类，我们可以借助它实现很多关于图片的操作。&lt;/p&gt;
&lt;p&gt;旋转后的效果如下：&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/dog5.jpg&quot; alt=&quot;dog5&quot;&gt;&lt;/p&gt;
&lt;p&gt;有了这样的效果之后，下来要做的就是，用一个矩形路径和这个被旋转的椭圆合并出半个心形路径，然后填充这个半个心形路径就可以到半个心形图片。这里使用上面定义好的&lt;code&gt;Region&lt;/code&gt;类，Region就是一个矩形类，我们用这个类和半个椭圆类结合起来就可以拼出半个心形的路径来，具体的拼接方法如下：&lt;br&gt;&lt;figure class=&quot;highlight hsp&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 将oval椭圆的路径和矩形Region路径合并&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;region.setPath(oval, new Region((&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)&lt;span class=&quot;keyword&quot;&gt;width&lt;/span&gt;, (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt;)height))&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 画出该路径&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;canvas.drawPath(region.getBoundaryPath(), paint)&lt;span class=&quot;comment&quot;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;br&gt;画出后的效果如下：&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/dog6.jpg&quot; alt=&quot;dog6&quot;&gt;&lt;/p&gt;
&lt;p&gt;好了，这样就画出了半个心形图片，重复上面的操作就可以画出另外一半的心形图片了，方法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight maxima&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;oval.addOval(ovalRect, Path.Direction.CW);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;matrix&lt;/span&gt;.postRotate(-&lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;oval.&lt;span class=&quot;built_in&quot;&gt;transform&lt;/span&gt;(&lt;span class=&quot;built_in&quot;&gt;matrix&lt;/span&gt;, oval);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;region&lt;/span&gt;.setPath(oval,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;new&lt;/span&gt; Region(&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;, (int)&lt;span class=&quot;built_in&quot;&gt;width&lt;/span&gt; / &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, (int)&lt;span class=&quot;built_in&quot;&gt;height&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;canvas.drawPath(&lt;span class=&quot;built_in&quot;&gt;region&lt;/span&gt;.getBoundaryPath(), paint);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;br&gt;&lt;img src=&quot;http://7xii1s.com1.z0.glb.clouddn.com/dog7.jpg&quot; alt=&quot;dog7&quot;&gt;&lt;/p&gt;
&lt;p&gt;总结：只要用好Path、Shader、RectF所有的图形都可以迎刃而解，但是有一点需要注意的就是，这些操作都是比较消耗性能的操作，所以使用的时候需要注意性能问题。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;接下来几周的内容是一系列文章，来讲解Android中不规则图形的创建和使用。今天先来介绍一下圆角图片的实现。&lt;/p&gt;
&lt;p&gt;有一个好消息要告诉大家，那就是在API 20中Android已经默认提供了圆角矩形的图片，RoundRectShape Drawable，但是不好的消息是大多数的人的手机版本都是20或者以上的，因此还是自己动手丰衣足食吧。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Http代理设置</title>
    <link href="http://tedyin.me/2014/10/26/http-proxy/"/>
    <id>http://tedyin.me/2014/10/26/http-proxy/</id>
    <published>2014-10-26T13:10:00.000Z</published>
    <updated>2016-02-29T09:31:38.000Z</updated>
    
    <content type="html">&lt;p&gt;Android应用程序访问互联网时，如果处于WIFI或者CMNET、UNINET或者3GNET，CTNET等接入方式时，无需设置代理即可顺利的访问网络，但是如果处于WAP环境下，那么就需要首先设置代理，之后才能访问互联网。跟设置超时一样，设置代理同样有HttpClient和HttpURLConnection两种方式：&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;HttpClient方式&quot;&gt;&lt;a href=&quot;#HttpClient方式&quot; class=&quot;headerlink&quot; title=&quot;HttpClient方式&quot;&gt;&lt;/a&gt;HttpClient方式&lt;/h2&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;HttpClient httpClient = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; DefaultHttpClient();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; host = &lt;span class=&quot;built_in&quot;&gt;Proxy&lt;/span&gt;.getDefaultHost(); &lt;span class=&quot;comment&quot;&gt;//默认代理服务器地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; port = &lt;span class=&quot;built_in&quot;&gt;Proxy&lt;/span&gt;.getDefaultPort(); &lt;span class=&quot;comment&quot;&gt;//默认代理服务器端口号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HttpHost httpHost = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; HttpHost(host, port);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;HttpParams params = httpClient.getParams();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;params.setParameter(ConnRouteParams.DEFAULT_PROXY, httpHost); &lt;span class=&quot;comment&quot;&gt;//设置默认代理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;HttpURLConnection方式&quot;&gt;&lt;a href=&quot;#HttpURLConnection方式&quot; class=&quot;headerlink&quot; title=&quot;HttpURLConnection方式&quot;&gt;&lt;/a&gt;HttpURLConnection方式&lt;/h2&gt;&lt;figure class=&quot;highlight qml&quot;&gt;&lt;figcaption&gt;&lt;span&gt;lang: java&lt;/span&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;String&lt;/span&gt; host = android.net.Proxy.getDefaultHost(); &lt;span class=&quot;comment&quot;&gt;// 默认代理服务器地址&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt; port = android.net.Proxy.getDefaultPort(); &lt;span class=&quot;comment&quot;&gt;// 默认代理服务器端口号&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;SocketAddress socketAddr = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; InetSocketAddress(host, port);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 构造代理对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;java.net.Proxy proxy = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; java.net.Proxy(java.net.Proxy.Type.HTTP, socketAddr);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;decorator&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;try&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  URL &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt; = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; URL(&lt;span class=&quot;string&quot;&gt;&quot;www.baidu.com&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 设置代理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  HttpURLConnection conn = (HttpURLConnection) &lt;span class=&quot;built_in&quot;&gt;url&lt;/span&gt;.openConnection(proxy);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (MalformedURLException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;catch&lt;/span&gt; (IOException e) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  e.printStackTrace();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;##参考&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/ace1985/article/details/7844159&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Android通过WAP方式联网&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Android应用程序访问互联网时，如果处于WIFI或者CMNET、UNINET或者3GNET，CTNET等接入方式时，无需设置代理即可顺利的访问网络，但是如果处于WAP环境下，那么就需要首先设置代理，之后才能访问互联网。跟设置超时一样，设置代理同样有HttpClient和HttpURLConnection两种方式：&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>SSH的原理与使用</title>
    <link href="http://tedyin.me/2014/10/19/ssh-use/"/>
    <id>http://tedyin.me/2014/10/19/ssh-use/</id>
    <published>2014-10-19T08:02:00.000Z</published>
    <updated>2016-02-29T09:31:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;什么是SSH&quot;&gt;&lt;a href=&quot;#什么是SSH&quot; class=&quot;headerlink&quot; title=&quot;什么是SSH&quot;&gt;&lt;/a&gt;什么是SSH&lt;/h2&gt;&lt;p&gt;SSH是Secure Shell的简称，是由IEFT网络工作组制定，用来为远程登录等网路服务提供一种安全的信息传输协议。最初是用于Unix平台，现在各个平台上都可以使用SSH协议程序进行信息传输。SSH只是一种协议，针对这种协议的实现有很多个版本，有商业化闭源的实现也有开源的实现，OpenSSH就是著名的开源SSH实现。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;SSH登录远程主机的过程&quot;&gt;&lt;a href=&quot;#SSH登录远程主机的过程&quot; class=&quot;headerlink&quot; title=&quot;SSH登录远程主机的过程&quot;&gt;&lt;/a&gt;SSH登录远程主机的过程&lt;/h2&gt;&lt;p&gt;假设有客户端要远程登录服务器，使用SSH登录的过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端向服务端发起连接请求，服务端收到请求后，返回给客户端一个公钥。&lt;/li&gt;
&lt;li&gt;客户端使用该公钥加密用户明和登录密码，然后将加密后的数据传递给服务端。&lt;/li&gt;
&lt;li&gt;服务端收到用户传递过来的加密数据后，使用自己的私钥解密，检查用户是否为合法用户。&lt;/li&gt;
&lt;li&gt;如果用户合法，则简历连接，否则拒绝连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在上述登录过程中，如果用户是第一次登录远程主机，那么在用户收到远程主机的公钥后，本地终端就会提示用户注意远程主机是否为真实的目标主机，提示信息一般如下：&lt;/p&gt;
&lt;figure class=&quot;highlight vbnet&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;The authenticity &lt;span class=&quot;keyword&quot;&gt;of&lt;/span&gt; host &lt;span class=&quot;comment&quot;&gt;&#39;host (12.18.429.21)&#39; can&#39;t be established.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　RSA &lt;span class=&quot;keyword&quot;&gt;key&lt;/span&gt; fingerprint &lt;span class=&quot;keyword&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;98&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;e:d7:e0:de:&lt;span class=&quot;number&quot;&gt;9&lt;/span&gt;f:ac:&lt;span class=&quot;number&quot;&gt;67&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;28&lt;/span&gt;:c2:&lt;span class=&quot;number&quot;&gt;42&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;d:&lt;span class=&quot;number&quot;&gt;37&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;16&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;58&lt;/span&gt;:&lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;d.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;　　Are you sure you want &lt;span class=&quot;keyword&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;continue&lt;/span&gt; connecting (yes/no)?&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在用户根据IP地址和服务端指纹信息确定之后，SSH程序会将该主机信息保存在本地，当下次再登录该主机时，将会直接体使用户输入密码来登录，将不再会提示用户所登录的主机信息。&lt;/p&gt;
&lt;p&gt;###中间人攻击&lt;/p&gt;
&lt;p&gt;在用户首次登录的时之所以提示用户登录信息，是因为在逻辑上SSH有个漏洞，假如用户在一个开放网络中，在服务端和客户端之间存在一个第三方的主机(中间人主机)，而且用户登录时被中间人主机拦截，并向客户端返回了自己伪造的公钥，但是用户并未检查所登录的主机是否为目标主机，此时使用伪造的公钥将用户数据加密后传给中间人主机，这样中间人主机就可以拿到用户的登录信息，这就会导致严重的安全事故。因此在为了避免中间人攻击，我们需要在首次登录时，检查目标主机的信息是否为我们所要登录的目标主机，确认之后在进行登录操作。&lt;/p&gt;
&lt;p&gt;###使用公钥登录&lt;br&gt;为了更好的避免中间人攻击，并且方便我们使用SSH登录，我们可以使用SSH提供的公钥登录，我们可以在本地使用&lt;code&gt;ssh-keygen&lt;/code&gt;命令生成一组公钥和私钥默认为(id_rsa.pub和id_rsa)，然后我们将公钥存储在我们要登录的服务端。当使用公钥登录时，客户端发起连接，服务端会随机发送一串字符串，客户端使用私钥加密后再回传给服务端，服务端收到用户回传的加密数据和，使用先前用户存储在服务端的公钥进行解密，然后检查数据是否正确，如果正确则建立连接，否则拒绝连接，并返回拒绝原因。&lt;/p&gt;
&lt;p&gt;使用公钥登录后，用户就不必再去每次都输入用户名和密码，而是直接建立连接，也很好的避免了中间人攻击的问题，是一个比较好的解决办法，只是相比直接用口令登录要麻烦一点，不过一劳永逸，刚开始麻烦后面就简单多了。&lt;/p&gt;
&lt;p&gt;##SSH登录使用&lt;/p&gt;
&lt;p&gt;使用SSH登录非常简单，命令如下:&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//ssh &lt;span class=&quot;string&quot;&gt;[username]&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;[server ip/domain]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh user@server.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;指定端口登录：&lt;/p&gt;
&lt;figure class=&quot;highlight accesslog&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//ssh -P port &lt;span class=&quot;string&quot;&gt;[username]&lt;/span&gt;@&lt;span class=&quot;string&quot;&gt;[server ip/domain]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;ssh -P &lt;span class=&quot;number&quot;&gt;2222&lt;/span&gt; user@server.com&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;SSH的默认端口号是22，可以通过&lt;code&gt;-P&lt;/code&gt;参数来指定端口号。&lt;/p&gt;
&lt;p&gt;SSH登录时的默认端口是22，如果服务端根据自身需要，要求客户端使用别的端口(例如2222)进行登录时，我们可以在客户端使用-P参数来指定登录端口&lt;/p&gt;
&lt;p&gt;##参考&lt;br&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;ssh原理以及使用&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是SSH&quot;&gt;&lt;a href=&quot;#什么是SSH&quot; class=&quot;headerlink&quot; title=&quot;什么是SSH&quot;&gt;&lt;/a&gt;什么是SSH&lt;/h2&gt;&lt;p&gt;SSH是Secure Shell的简称，是由IEFT网络工作组制定，用来为远程登录等网路服务提供一种安全的信息传输协议。最初是用于Unix平台，现在各个平台上都可以使用SSH协议程序进行信息传输。SSH只是一种协议，针对这种协议的实现有很多个版本，有商业化闭源的实现也有开源的实现，OpenSSH就是著名的开源SSH实现。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Log4J介绍</title>
    <link href="http://tedyin.me/2014/10/12/log4j/"/>
    <id>http://tedyin.me/2014/10/12/log4j/</id>
    <published>2014-10-12T13:37:00.000Z</published>
    <updated>2016-02-29T09:31:52.000Z</updated>
    
    <content type="html">&lt;p&gt;##Log4J是什么？&lt;/p&gt;
&lt;p&gt;Log4J是Apache基金会下一个开源的日志管理项目，可以高度自定义日志的收集过程，和收集粒度，以及收集后日志的输出位置，可以输出到控制台，文件，数据库，甚至是远程服务器，这些操作仅仅只需要通过Log4J的配置文件进行定义后便可实现，是一个非常而且强大的日志收集库。除此之外，Log4J提供多语言兼容，可以在Java，Python，.Net等语言环境下的服务器中使用，可以对服务集群的日志进行统一管理。&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;##Log4J学习&lt;/p&gt;
&lt;p&gt;Log4J三大组件：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Logger（记录器）：只管记录日志（根据日志级别记录），不管日志存储在什么地方。&lt;/li&gt;
&lt;li&gt;Appender（存放器）：将Logger记录的日志，存放到配置文件中所指向的地方，只处理日志的存放过程。&lt;/li&gt;
&lt;li&gt;Layout（布局）：将日志进行格式化后再输出，也就是说他是用来让日志看这更顺眼的。当然如何算顺眼，由你在配置文件中设定。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;一个Logger可以有多个Appender，可以同时输出到多个设备上，每一个Appender都有一个Layout来格式化输出内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;###Logger 组件&lt;br&gt;有一个超类，log4j.rootLogger这个超类永远存在，可以使用Logger类中的getRootLogger()方法来获得这个对象的引用。&lt;/p&gt;
&lt;p&gt;Logger组件的继承关系：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;如果子类Logger没有定义日志级别，那么它将继承父类的日志级别。&lt;/li&gt;
&lt;li&gt;如果把子类Logger的组件的additivity设置为false(默认为true)，那子类将不会继承父类的Appender，否则将继承父类所有的Appender。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;###Appender 组件&lt;br&gt;Appender用来决定日志要输出到什么地方，支持一下目的地：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;控制台Console&lt;/li&gt;
&lt;li&gt;文件File&lt;/li&gt;
&lt;li&gt;GUI组件&lt;/li&gt;
&lt;li&gt;套接口服务器（Remote Socket Server）&lt;/li&gt;
&lt;li&gt;NT的事件记录器&lt;/li&gt;
&lt;li&gt;UNIX守护进程（输出到某个进程中去）(待验证)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;###Layout 组件&lt;br&gt;Layout组件决定日志的输出格式,有如下几类：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;org.apache.log4j.HTMLLayout     以Html格式输出日志&lt;/li&gt;
&lt;li&gt;org.apache.log4j.PatternLayout  以自定义Pattern的模式输出日志&lt;/li&gt;
&lt;li&gt;org.apache.log4j.SimpleLayout   包含日志信息的级别和，日志字符串&lt;/li&gt;
&lt;li&gt;org.apache.log4j.TTCCLayout     包含日志产生的线程，时间，类别等详细信息&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##日志级别&lt;br&gt;日志级别分为5种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;fatal      严重错误，会导致系统崩溃&lt;/li&gt;
&lt;li&gt;error     虽然出错，但是系统依然可以运行  &lt;/li&gt;
&lt;li&gt;warn     警告，系统此处会有发生潜在错误的可能性&lt;/li&gt;
&lt;li&gt;info       一般的运行时信息&lt;/li&gt;
&lt;li&gt;debug  调试信息，粒度很细&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除了上述5中级别外，还有两种特殊级别的日志分类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;off        关闭日志，级别最高&lt;/li&gt;
&lt;li&gt;all         打开日志，级别最低&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上日志的级别高低排序如下：&lt;br&gt;off &amp;gt; fatal &amp;gt; error &amp;gt; warn &amp;gt; info &amp;gt; debug &amp;gt; all&lt;br&gt;当日配置的志级别为info时所有的Debug日志将不会输出。&lt;/p&gt;
&lt;p&gt;Log4J建议使用上述中的4种分别是：error、warn、info、debug&lt;/p&gt;
&lt;p&gt;##Log4J 应用&lt;br&gt;对于应用，无非就是配置和使用，先来看看如何在程序中配置Log4J&lt;/p&gt;
&lt;p&gt;###Log4J的配置&lt;br&gt;Log4J支持XML配置和properties文件两种方式进行配置，此处介绍后一种。&lt;/p&gt;
&lt;p&gt;####set Logger&lt;br&gt;log4j.rootLogger=INFO,infoLog,file&lt;/p&gt;
&lt;p&gt;####infoLog logger&lt;br&gt;log4j.appender.infoLog=org.apache.log4j.ConsoleAppender // 配置Appender&lt;br&gt;log4j.appender.infoLog.layout=org.apache.log4j.PatternLayout // 配置Layout&lt;br&gt;log4j.appender.infoLog.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n&lt;/p&gt;
&lt;p&gt;####file logger&lt;br&gt;log4j.appender.file=org.apache.log4j.FileAppender // 定义Appender&lt;br&gt;log4j.appender.file.File=log.txt&lt;br&gt;log4j.appender.file.layout=org.apache.log4j.PatternLayout // 定义Layout&lt;br&gt;log4j.appender.file.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n// 自定义Layout格式&lt;/p&gt;
&lt;p&gt;####Error log&lt;br&gt;log4j.errorLog=ERROR, errorLog&lt;/p&gt;
&lt;p&gt;####errorLog logger&lt;br&gt;log4j.appender.errorLog=org.apache.log4j.FileAppender&lt;br&gt;log4j.appender.errorLog.File=errorLog.txt&lt;br&gt;log4j.appender.errorLog.layout=org.apache.log4j.PatternLayout&lt;br&gt;log4j.appender.errorLog.layout.ConversionPattern=%d-[TS] %p %t %c - %m%n&lt;/p&gt;
&lt;p&gt;&lt;em&gt;详细的使用请参考Log4J的&lt;a href=&quot;http://logging.apache.org/log4j/1.2/apidocs/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;API&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;##Log4J在程序中的应用&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;先将log4j-xxx.jar导入工程中。&lt;/li&gt;
&lt;li&gt;新建log4j.properties配置文件，并加入配置。&lt;/li&gt;
&lt;li&gt;在程序中使用Log4J的API。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;##参考：&lt;br&gt;&lt;a href=&quot;http://blog.csdn.net/lyc557/article/details/3964459&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;日志级别&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;http://www.iteye.com/topic/158409&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Log4J的使用&lt;/a&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;##Log4J是什么？&lt;/p&gt;
&lt;p&gt;Log4J是Apache基金会下一个开源的日志管理项目，可以高度自定义日志的收集过程，和收集粒度，以及收集后日志的输出位置，可以输出到控制台，文件，数据库，甚至是远程服务器，这些操作仅仅只需要通过Log4J的配置文件进行定义后便可实现，是一个非常而且强大的日志收集库。除此之外，Log4J提供多语言兼容，可以在Java，Python，.Net等语言环境下的服务器中使用，可以对服务集群的日志进行统一管理。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
